namespace drr.projection.iso20022.hkma.rewrite.trade.tr
version "${project.version}"

import cdm.base.math.*
import cdm.base.staticdata.asset.common.*

import drr.regulation.common.* as common
import drr.regulation.common.util.*
import drr.regulation.hkma.rewrite.trade.*
import drr.standards.iosco.cde.*
import drr.standards.iosco.cde.base.price.*
import drr.standards.iso.*

import iso20022.auth030.hkma.tr.*

func Project_HKMATrTradeReportToIso20022:
    [projection XML]
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        iso20022Report Document (1..1)

    set iso20022Report -> derivsTradRpt -> rptHdr: Create_TradeReportHeader

    add iso20022Report -> derivsTradRpt -> tradData -> rpt:
        Create_TradeReport33Choice__1(drrReport)

func Create_TradeReportHeader:
    output:
        rptHdr TradeReportHeader4__1 (1..1)

    set rptHdr:
        TradeReportHeader4__1 {
            nbRcrds: 1
        }

func Create_TradeReport33Choice__1:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        rpt TradeReport33Choice__1 (1..1)

    alias actionType: drrReport -> actionType

    set rpt:
        TradeReport33Choice__1 {
            new: if actionType = NEWT
                then TradeData43__1 {
                    ctrPtySpcfcData: Create_CounterpartySpecificData36__1(drrReport),
                    cmonTradData: Create_CommonTradeDataReport71__1(drrReport),
                    techAttrbts: Create_TechnicalAttributes5__1(drrReport),
                    splmtryData: Create_SupplementaryData1(drrReport)
                },
            mod: if actionType = MODI
                then TradeData43__2 {
                    ctrPtySpcfcData: Create_CounterpartySpecificData36__1(drrReport),
                    cmonTradData: Create_CommonTradeDataReport71__2(drrReport),
                    techAttrbts: Create_TechnicalAttributes5__1(drrReport),
                    splmtryData: Create_SupplementaryData1(drrReport)
                },
            crrctn: if actionType = CORR
                then TradeData43__3 {
                    ctrPtySpcfcData: Create_CounterpartySpecificData36__1(drrReport),
                    cmonTradData: Create_CommonTradeDataReport71__3(drrReport),
                    techAttrbts: Create_TechnicalAttributes5__1(drrReport),
                    splmtryData: Create_SupplementaryData1(drrReport)
                },
            termntn: if actionType = TERM
                then TradeData43__4 {
                    ctrPtySpcfcData: Create_CounterpartySpecificData36__2(drrReport),
                    cmonTradData: Create_CommonTradeDataReport71__4(drrReport),
                    techAttrbts: Create_TechnicalAttributes5__1(drrReport),
                    splmtryData: Create_SupplementaryData1(drrReport)
                },
            valtnUpd: if actionType = VALU
                then TradeData43__5 {
                    ctrPtySpcfcData: Create_CounterpartySpecificData36__3(drrReport), // Sprint 2025-07 TH Comment: Incomplete function, because Valuation Data and Delta are not part of the HKMA report
                    cmonTradData: Create_CommonTradeDataReport71__5(drrReport),
                    techAttrbts: Create_TechnicalAttributes5__1(drrReport),
                    splmtryData: Create_SupplementaryData1(drrReport)
                },
            err: if actionType = EROR
                then TradeData43__6 {
                    ctrPtySpcfcData: Create_CounterpartySpecificData36__2(drrReport),
                    cmonTradData: Create_CommonTradeDataReport71__6(drrReport),
                    techAttrbts: Create_TechnicalAttributes5__1(drrReport),
                    splmtryData: Create_SupplementaryData1(drrReport)
                },
            rvv: if actionType = REVI
                then TradeData43__3 {
                    ctrPtySpcfcData: Create_CounterpartySpecificData36__1(drrReport),
                    cmonTradData: Create_CommonTradeDataReport71__3(drrReport),
                    techAttrbts: Create_TechnicalAttributes5__1(drrReport),
                    splmtryData: Create_SupplementaryData1(drrReport)
                },
            portOut: if actionType = PRTO
                then TradeData43__7 {
                    ctrPtySpcfcData: Create_CounterpartySpecificData36__2(drrReport),
                    cmonTradData: Create_CommonTradeDataReport71__7(drrReport),
                    techAttrbts: Create_TechnicalAttributes5__1(drrReport),
                    splmtryData: Create_SupplementaryData1(drrReport)
        }}

// CounterpartySpecificData36
func Create_CounterpartySpecificData36__1:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        ctrPtySpcfcData CounterpartySpecificData36__1 (1..1)

    set ctrPtySpcfcData:
        CounterpartySpecificData36__1 {
            ctrPty: Create_TradeCounterpartyReport20__1(drrReport),
            rptgTmStmp: drrReport -> reportingTimestamp
        }

func Create_CounterpartySpecificData36__2:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        ctrPtySpcfcData CounterpartySpecificData36__2 (1..1)

    set ctrPtySpcfcData:
        CounterpartySpecificData36__2 {
            ctrPty: Create_TradeCounterpartyReport20__2(drrReport),
            rptgTmStmp: drrReport -> reportingTimestamp
        }

func Create_CounterpartySpecificData36__3:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        ctrPtySpcfcData CounterpartySpecificData36__3 (1..1)
    set ctrPtySpcfcData:
        CounterpartySpecificData36__3 {
            ctrPty: Create_TradeCounterpartyReport20__2(drrReport),
            valtn: empty, // Sprint 2025-07 TH Comment: Valuation Data and Delta are not part of the HKMA report.
            rptgTmStmp: drrReport -> reportingTimestamp,
        }

// TradeCounterpartyReport20
func Create_TradeCounterpartyReport20__1:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        ctrPty TradeCounterpartyReport20__1 (1..1)

    set ctrPty:
        TradeCounterpartyReport20__1 {
            rptgCtrPty: Counterparty45__1 {
                id: Create_PartyIdentification248Choice__1(drrReport -> counterparty1),
                drctnOrSd: Direction4Choice__1 {
                    ctrPtySd: drrReport -> direction1 to-enum OptionParty1Code,
                    drctn: Direction2__1 {
                        drctnOfTheFrstLeg: drrReport -> leg1 -> direction2 to-enum OptionParty3Code,
                        drctnOfTheScndLeg: drrReport -> leg2 -> direction2 to-enum OptionParty3Code
                }},
                ntr: CounterpartyTradeNature15Choice__1 {
                    fi: if drrReport -> natureOfCounterparty1 = F
                        then FinancialInstitutionSector1__1 {
                            sctr: FinancialPartyClassification2Choice__1 {
                                cd: drrReport -> corporateSectorOfTheCounterparty1
                                    first
                                    to-enum FinancialPartySectorType3Code
                    }},
                    nfi: if drrReport -> natureOfCounterparty1 = N
                        then NonFinancialInstitutionSector10__1 {
                            sctr: GenericIdentification175__1 {
                                id: drrReport -> counterparty1
                    }},
                    cntrlCntrPty: if drrReport -> natureOfCounterparty1 = C
                        then NoReasonCode -> NORE,
                    othr: if drrReport -> natureOfCounterparty1 = O
                        then NoReasonCode -> NORE
                },
                tradgCpcty: drrReport -> tradingCapacity to-enum iso20022.auth030.hkma.tr.TradingCapacity7Code,
                tradrLctn: drrReport -> traderLocation to-string,
                bookgLctn: drrReport -> bookingLocation to-string
            },
            othrCtrPty: Counterparty46__1 {
                idTp: Create_PartyIdentification248Choice__2(drrReport),
                ntr: CounterpartyTradeNature15Choice__1 {
                    fi: if drrReport -> natureOfCounterparty2 = F
                        then FinancialInstitutionSector1__1 {
                            sctr: FinancialPartyClassification2Choice__1 {
                                cd: drrReport -> corporateSectorOfTheCounterparty2
                                    first
                                    to-enum FinancialPartySectorType3Code
                    }},
                    nfi: if drrReport -> natureOfCounterparty2 = N
                        then NonFinancialInstitutionSector10__1 {
                            sctr: GenericIdentification175__1 {
                                id: drrReport -> counterparty2
                    }},
                    cntrlCntrPty: if drrReport -> natureOfCounterparty2 = C
                        then NoReasonCode -> NORE,
                    othr: if drrReport -> natureOfCounterparty2 = O
                        then NoReasonCode -> NORE
            }},
            brkr: Create_OrganisationIdentification15Choice__3(
                    drrReport -> brokerIdentifierFormat,
                    drrReport -> brokerID,
                    drrReport -> brokerSchemeName
                ),
            submitgAgt: GetSubmitgAgt(drrReport),
            clrMmb: Create_PartyIdentification248Choice__3(
                    drrReport -> clearingMemberIdentifierFormat,
                    drrReport -> clearingMember,
                    drrReport -> clearingMemberSchemeName
                ),
            nttyRspnsblForRpt: GetNttyRspnsblForRpt(drrReport),
            bnfcry: Create_PartyIdentification248Choice__4(drrReport)
        }

func Create_TradeCounterpartyReport20__2:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        ctrPty TradeCounterpartyReport20__2 (1..1)

    set ctrPty:
        TradeCounterpartyReport20__2 {
            rptgCtrPty: Counterparty45__2 {
                id: Create_PartyIdentification248Choice__1(drrReport -> counterparty1)
            },
            othrCtrPty: Counterparty46__2 {
                idTp: Create_PartyIdentification248Choice__5(drrReport)
            },
            submitgAgt: GetSubmitgAgt(drrReport),
            nttyRspnsblForRpt: GetNttyRspnsblForRpt(drrReport),
        }

func GetSubmitgAgt:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        submitgAgt OrganisationIdentification15Choice__4 (1..1)

    set submitgAgt:
        Create_OrganisationIdentification15Choice__4(drrReport -> reportSubmittingEntityID)

func GetNttyRspnsblForRpt:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        nttyRspnsblForRpt OrganisationIdentification15Choice__1 (1..1)

    set nttyRspnsblForRpt:
        Create_OrganisationIdentification15Choice__1(
                drrReport -> entityResponsibleForReporting
            )

// PartyIdentification248Choice
func Create_PartyIdentification248Choice__1:
    inputs:
        lei string (1..1)
    output:
        id PartyIdentification248Choice__1 (1..1)

    set id:
        PartyIdentification248Choice__1 {
            lgl: LegalPersonIdentification1__1 {
                id: Create_OrganisationIdentification15Choice__1(lei)
        }}

func Create_PartyIdentification248Choice__2:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        id PartyIdentification248Choice__2 (1..1)

    set id:
        PartyIdentification248Choice__2 {
            lgl: LegalPersonIdentification1__2 {
                id: Create_OrganisationIdentification15Choice__2(
                        drrReport,
                        drrReport -> counterparty2IdentifierFormat,
                        drrReport -> counterparty2,
                        drrReport -> counterparty2SchemeName
                    ),
                ctry: drrReport -> countryOfTheCounterparty2 to-string
            },
            ntrl: if drrReport -> counterparty2IdentifierType = False
                then NaturalPersonIdentification3__1 {
                    id: NaturalPersonIdentification2__1 {
                        id: GenericIdentification175__1 {
                            id: drrReport -> counterparty2
                    }},
                    ctry: drrReport -> countryOfTheCounterparty2 to-string
        }}

func Create_PartyIdentification248Choice__3:
    inputs:
        idFormat common.PartyIdentifierFormat2Enum (0..1)
        idFromReport string (0..1)
        schemeName common.HKTRPartyScheme (0..1)
    output:
        id PartyIdentification248Choice__3 (1..1)

    set id:
        PartyIdentification248Choice__3 {
            lgl: LegalPersonIdentification1__3 {
                id: Create_OrganisationIdentification15Choice__3(
                        idFormat,
                        idFromReport,
                        schemeName
                    )
        }}

func Create_PartyIdentification248Choice__4:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        id PartyIdentification248Choice__4 (1..1)

    set id:
        PartyIdentification248Choice__4 {
            lgl: LegalPersonIdentification1__4 {
                id: OrganisationIdentification15Choice__5 {
                    othr: OrganisationIdentification38__4 {
                        id: GenericIdentification175__1 {
                            id: drrReport -> beneficiary
        }}}}}

func Create_PartyIdentification248Choice__5:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        id PartyIdentification248Choice__5 (1..1)

    set id:
        PartyIdentification248Choice__5 {
            lgl: LegalPersonIdentification1__5 {
                id: Create_OrganisationIdentification15Choice__2(
                        drrReport,
                        drrReport -> counterparty2IdentifierFormat,
                        drrReport -> counterparty2,
                        drrReport -> counterparty2SchemeName
                    )
            },
            ntrl: if drrReport -> counterparty2IdentifierType = False
                then NaturalPersonIdentification3__2 {
                    id: NaturalPersonIdentification2__1 {
                        id: GenericIdentification175__1 {
                            id: drrReport -> counterparty2
        }}}}

// OrganisationIdentification15Choice
func Create_OrganisationIdentification15Choice__1:
    inputs:
        lei string (1..1)
    output:
        id OrganisationIdentification15Choice__1 (1..1)

    set id:
        OrganisationIdentification15Choice__1 {
            lei: lei
        }

func Create_OrganisationIdentification15Choice__2:
    inputs:
        drrReport HKMATransactionReport (1..1)
        idFormat common.PartyIdentifierFormat2Enum (0..1)
        idFromReport string (1..1)
        schemeName common.HKTRPartyScheme (1..1)
    output:
        id OrganisationIdentification15Choice__2 (1..1)

    set id:
        OrganisationIdentification15Choice__2 {
            lei: if idFormat = Lei then idFromReport,
            othr: if idFormat = Other
                then OrganisationIdentification38__1 {
                    id: GenericIdentification175__2 {
                        id: idFromReport,
                        schmeNm: schemeName to-enum iso20022.auth030.hkma.tr.HKTRPartyScheme
                    },
                    nm: drrReport -> counterparty2Name,
                },
            anyBIC: if idFormat = SWIFTBIC then idFromReport
        }

func Create_OrganisationIdentification15Choice__3:
    inputs:
        idFormat common.PartyIdentifierFormat2Enum (0..1)
        idFromReport string (1..1)
        schemeName common.HKTRPartyScheme (1..1)
    output:
        id OrganisationIdentification15Choice__3 (1..1)

    set id:
        OrganisationIdentification15Choice__3 {
            lei: if idFormat = Lei then idFromReport,
            othr: if idFormat = Other
                then OrganisationIdentification38__2 {
                    id: GenericIdentification175__2 {
                        id: idFromReport,
                        schmeNm: schemeName to-enum iso20022.auth030.hkma.tr.HKTRPartyScheme
            }},
            anyBIC: if idFormat = SWIFTBIC then idFromReport
        }

func Create_OrganisationIdentification15Choice__4:
    inputs:
        lei string (1..1)
    output:
        id OrganisationIdentification15Choice__4 (1..1)

    set id:
        OrganisationIdentification15Choice__4 {
            lei: lei,
            othr: OrganisationIdentification38__3 {
                id: GenericIdentification175__3 {
                    id: empty // Sprint 2025-07 TH Comment: Not possible to populate Othr/Id/Id only LEI.
        }}}

// CommonTradeDataReport69
func Create_CommonTradeDataReport71__1:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        cmonTradData CommonTradeDataReport71__1 (1..1)

    set cmonTradData:
        CommonTradeDataReport71__1 {
            ctrctData: Create_ContractType15__1(drrReport),
            txData: Create_TradeTransaction50__1(drrReport)
        }

func Create_CommonTradeDataReport71__2:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        cmonTradData CommonTradeDataReport71__2 (1..1)

    set cmonTradData:
        CommonTradeDataReport71__2 {
            ctrctData: Create_ContractType15__1(drrReport),
            txData: Create_TradeTransaction50__2(drrReport)
        }

func Create_CommonTradeDataReport71__3:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        cmonTradData CommonTradeDataReport71__3 (1..1)

    set cmonTradData:
        CommonTradeDataReport71__3 {
            ctrctData: Create_ContractType15__1(drrReport),
            txData: Create_TradeTransaction50__3(drrReport)
        }

func Create_CommonTradeDataReport71__4:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        cmonTradData CommonTradeDataReport71__4 (1..1)

    set cmonTradData:
        CommonTradeDataReport71__4 {
            txData: Create_TradeTransaction50__4(drrReport),
            ctrctData: Create_ContractType15__2(drrReport)
        }

func Create_CommonTradeDataReport71__5:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        cmonTradData CommonTradeDataReport71__5 (1..1)

    set cmonTradData:
        CommonTradeDataReport71__5 {
            txData: Create_TradeTransaction50__5(drrReport)
        }

func Create_CommonTradeDataReport71__6:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        cmonTradData CommonTradeDataReport71__6 (1..1)

    set cmonTradData:
        CommonTradeDataReport71__6 {
            ctrctData: Create_ContractType15__2(drrReport),
            txData: Create_TradeTransaction50__6(drrReport)
        }

func Create_CommonTradeDataReport71__7:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        cmonTradData CommonTradeDataReport71__7 (1..1)

    set cmonTradData:
        CommonTradeDataReport71__7 {
            ctrctData: Create_ContractType15__2(drrReport),
            txData: Create_TradeTransaction50__7(drrReport)
        }

func Create_CommonTradeDataReport69__7:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        cmonTradData CommonTradeDataReport71__6 (1..1)

    set cmonTradData:
        CommonTradeDataReport71__6 {
            ctrctData: Create_ContractType15__2(drrReport),
            txData: Create_TradeTransaction50__6(drrReport)
        }

// ContractType14
func Create_ContractType15__1:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        ctrctData ContractType15__1 (1..1)

    set ctrctData:
        ContractType15__1 {
            ctrctTp: drrReport -> contractType to-enum FinancialInstrumentContractType2Code,
            asstClss: drrReport -> assetClass to-enum ProductType4Code__1,
            pdctId: SecurityIdentification46__1 {
                unqPdctIdr: UniqueProductIdentifier2Choice__1 {
                    id: drrReport -> uniqueProductIdentifier,
                    prtry: GenericIdentification185__1 {
                        id: drrReport -> uniqueProductIdentifierProprietary,
                        schmeNm: empty // Sprint 2025-07 TH Comment: Not possible to populate schmeNm. Optional field.
                }},
                pdctDesc: drrReport -> productDescription
            },
            undrlygInstrm: SecurityIdentification41Choice__1 {
                isin: if drrReport -> underlyingIdentificationType = I
                    then drrReport -> underlyingIdentification,
                bskt: if drrReport -> underlyingIdentificationType = B
                    then CustomBasket4__1 {
                        // Sprint 2025-07 TH Comment: Specs mention that structurer LEI goes first, and the ID goes second
                        strr: SubString(drrReport -> customBasketCode, 1, 20),
                        id: SubString(drrReport -> customBasketCode, 21, 52),
                        cnsttnts: drrReport -> basketConstituents
                            extract
                                BasketConstituents3__1 {
                                    instrmId: InstrumentIdentification6Choice__1 {
                                        isin: if source = ProductIdTypeEnum -> ISIN
                                            then identifier,
                                        othrId: if source <> ProductIdTypeEnum -> ISIN
                                            then GenericIdentification184 {
                                                id: identifier,
                                                src: source to-string
                                    }},
                                    qty: drrReport -> basketConstituents -> numberOfUnits only-element,
                                    unitOfMeasr: UnitOfMeasure8Choice__1 {
                                        cd: drrReport -> basketConstituents -> unitOfMeasure
                                            only-element
                                        to-string,
                }}},
                indx: IndexIdentification1__1 {
                    isin: if drrReport -> underlyingIdentificationType = X
                        then drrReport -> underlyingIdentification,
                    nm: if drrReport -> underlyingIdentificationType = X
                        then drrReport -> nameOfTheUnderlyingIndex
                },
                othr: if drrReport -> underlyingIdentificationType is absent
                        and drrReport -> underlyingIdOther exists
                    then GenericIdentification184 {
                        id: drrReport -> underlyingIdOther,
                        src: drrReport -> underlyingIdOtherSource to-string
            }},
            sttlmCcy: CurrencyExchange23__1 {
                ccy: drrReport -> leg1 -> settlementCurrency to-string,
                fxgDt: drrReport -> leg1 -> fixingDate
            },
            sttlmCcyScndLeg: if drrReport -> leg2 -> settlementCurrency to-string = "Not Modelled"
                then empty // Sprint 2025-07 TH Comment: This empty is expected.
            else CurrencyExchange23__1 {
                ccy: drrReport -> leg2 -> settlementCurrency to-string,
                fxgDt: drrReport -> leg2 -> fixingDate
            },
            undrlygAsstTradgPltfmIdr: drrReport -> underlyingAssetTradingPlatformIdentifier,
            undrlygAsstPricSrc: drrReport -> underlyingAssetPriceSource,
            plcOfSttlm: drrReport -> settlementLocation to-string,
            derivBasedOnCrptAsst: drrReport -> cryptoAssetUnderlyingIndicator
        }

func Create_ContractType15__2:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        ctrctData ContractType15__2 (1..1)

    set ctrctData:
        ContractType15__2 {
            asstClss: drrReport -> assetClass to-enum ProductType4Code__1
        }

// TradeTransaction49
func Create_TradeTransaction50__1:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        txData TradeTransaction50__1 (1..1)

    set txData:
        TradeTransaction50__1 {
            txId: UniqueTransactionIdentifier2Choice__1 {
                unqTxIdr: GetTxId(drrReport),
                prtry: GenericIdentification175__4 {
                    id: if drrReport -> uniqueTransactionIdentifierProprietary exists
                        then drrReport -> uniqueTransactionIdentifierProprietary,
                    schmeNm: drrReport -> uniqueTransactionIdentifierProprietarySchemeName to-string
            }},
            prrTxId: GetPrrTxId(drrReport),
            collPrtflCd: GetCollPrtflCd(drrReport),
            pltfmIdr: GetPltfmIdr(drrReport),
            txPric: GetTxPric(drrReport),
            ntnlAmt: GetNtnlAmt(drrReport),
            ntnlQty: GetNtnlQty(drrReport),
            exctnTmStmp: GetExctnTmStmp(drrReport),
            fctvDt: GetFctvDt(drrReport),
            xprtnDt: GetXprtnDt(drrReport),
            derivEvt: GetDerivEvt1(drrReport),
            tradClr: GetTradClr(drrReport),
            intrstRate: GetIntrstRate(drrReport),
            ccy: GetCcy(drrReport),
            optn: GetOptn(drrReport),
            cdt: GetCdt(drrReport),
            othrPmt: GetOthrPmt(drrReport),
            packg: GetPackg(drrReport),
            scndryTxId: drrReport -> secondaryTransactionIdentifier,
            dlvryTp: drrReport -> deliveryType to-enum PhysicalTransferType4Code,
            sttlmDt: drrReport -> finalContractualSettlementDate,
            tradConf: TradeConfirmation4Choice__1 {
                confd: TradeConfirmation5__1 {
                    tp: if drrReport -> confirmed to-string <> "NCNF"
                        then drrReport -> confirmed to-enum TradeConfirmationType1Code
                },
                nonConfd: TradeNonConfirmation1 {
                    tp: if drrReport -> confirmed to-string = "NCNF"
                        then drrReport -> confirmed to-enum TradeConfirmationType2Code
            }},
            nonStdsdTerm: drrReport -> nonStandardizedTermIndicator,
            cmmdty: Create_AssetClassCommodity7Choice(drrReport)
        }

func Create_TradeTransaction50__2:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        txData TradeTransaction50__2 (1..1)

    set txData:
        TradeTransaction50__2 {
            txId: UniqueTransactionIdentifier2Choice__1 {
                unqTxIdr: GetTxId(drrReport),
                prtry: GenericIdentification175__4 {
                    id: if drrReport -> uniqueTransactionIdentifierProprietary exists
                        then drrReport -> uniqueTransactionIdentifierProprietary,
                    schmeNm: drrReport -> uniqueTransactionIdentifierProprietarySchemeName to-string
            }},
            prrTxId: GetPrrTxId(drrReport),
            collPrtflCd: GetCollPrtflCd(drrReport),
            pltfmIdr: GetPltfmIdr(drrReport),
            txPric: GetTxPric(drrReport),
            ntnlAmt: GetNtnlAmt(drrReport),
            ntnlQty: GetNtnlQty(drrReport),
            exctnTmStmp: GetExctnTmStmp(drrReport),
            fctvDt: GetFctvDt(drrReport),
            xprtnDt: GetXprtnDt(drrReport),
            derivEvt: GetDerivEvt2(drrReport),
            tradClr: GetTradClr(drrReport),
            intrstRate: GetIntrstRate(drrReport),
            ccy: GetCcy(drrReport),
            optn: GetOptn(drrReport),
            cdt: GetCdt(drrReport),
            othrPmt: GetOthrPmt(drrReport),
            packg: GetPackg(drrReport),
            scndryTxId: drrReport -> secondaryTransactionIdentifier,
            dlvryTp: drrReport -> deliveryType to-enum PhysicalTransferType4Code,
            sttlmDt: drrReport -> finalContractualSettlementDate,
            tradConf: TradeConfirmation4Choice__1 {
                confd: TradeConfirmation5__1 {
                    tp: if drrReport -> confirmed to-string <> "NCNF"
                        then drrReport -> confirmed to-enum TradeConfirmationType1Code
                },
                nonConfd: TradeNonConfirmation1 {
                    tp: if drrReport -> confirmed to-string = "NCNF"
                        then drrReport -> confirmed to-enum TradeConfirmationType2Code
            }},
            nonStdsdTerm: drrReport -> nonStandardizedTermIndicator,
            cmmdty: Create_AssetClassCommodity7Choice(drrReport)
        }

func Create_TradeTransaction50__3:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        txData TradeTransaction50__3 (1..1)

    set txData:
        TradeTransaction50__3 {
            txId: UniqueTransactionIdentifier2Choice__1 {
                unqTxIdr: GetTxId(drrReport),
                prtry: GenericIdentification175__4 {
                    id: if drrReport -> uniqueTransactionIdentifierProprietary exists
                        then drrReport -> uniqueTransactionIdentifierProprietary,
                    schmeNm: drrReport -> uniqueTransactionIdentifierProprietarySchemeName to-string
            }},
            exctnTmStmp: GetExctnTmStmp(drrReport),
            derivEvt: GetDerivEvt3(drrReport),
            othrPmt: GetOthrPmt(drrReport),
            collPrtflCd: GetCollPrtflCd(drrReport),
            ntnlAmt: GetNtnlAmt(drrReport),
            tradClr: GetTradClr(drrReport),
            prrTxId: GetPrrTxId(drrReport),
            pltfmIdr: GetPltfmIdr(drrReport),
            txPric: GetTxPric(drrReport),
            ntnlQty: GetNtnlQty(drrReport),
            fctvDt: GetFctvDt(drrReport),
            xprtnDt: GetXprtnDt(drrReport),
            intrstRate: GetIntrstRate(drrReport),
            ccy: GetCcy(drrReport),
            optn: GetOptn(drrReport),
            cdt: GetCdt(drrReport),
            packg: GetPackg(drrReport),
            scndryTxId: drrReport -> secondaryTransactionIdentifier,
            dlvryTp: drrReport -> deliveryType to-enum PhysicalTransferType4Code,
            earlyTermntnDt: drrReport -> earlyTerminationDate,
            sttlmDt: drrReport -> finalContractualSettlementDate,
            tradConf: TradeConfirmation4Choice__1 {
                confd: TradeConfirmation5__1 {
                    tp: if drrReport -> confirmed to-string <> "NCNF"
                        then drrReport -> confirmed to-enum TradeConfirmationType1Code
                },
                nonConfd: TradeNonConfirmation1 {
                    tp: if drrReport -> confirmed to-string = "NCNF"
                        then drrReport -> confirmed to-enum TradeConfirmationType2Code
            }},
            nonStdsdTerm: drrReport -> nonStandardizedTermIndicator,
            cmmdty: Create_AssetClassCommodity7Choice(drrReport)
        }

// `dlvryTp`, `earlyTermntnDt`, `sttlmDt`, `tradConf`, `nonStdsdTerm`, `cmmdty`
func Create_TradeTransaction50__4:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        txData TradeTransaction50__4 (1..1)

    set txData:
        TradeTransaction50__4 {
            txId: UniqueTransactionIdentifier2Choice__1 {
                unqTxIdr: GetTxId(drrReport),
                prtry: GenericIdentification175__4 {
                    id: if drrReport -> uniqueTransactionIdentifierProprietary exists
                        then drrReport -> uniqueTransactionIdentifierProprietary,
                    schmeNm: drrReport -> uniqueTransactionIdentifierProprietarySchemeName to-string
            }},
            derivEvt: GetDerivEvt4(drrReport),
            othrPmt: GetOthrPmt(drrReport),
            earlyTermntnDt: drrReport -> earlyTerminationDate
        }

func Create_TradeTransaction50__5:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        txData TradeTransaction50__5 (1..1)

    set txData:
        TradeTransaction50__5 {
            txId: UniqueTransactionIdentifier2Choice__1 {
                unqTxIdr: GetTxId(drrReport),
                prtry: GenericIdentification175__4 {
                    id: if drrReport -> uniqueTransactionIdentifierProprietary exists
                        then drrReport -> uniqueTransactionIdentifierProprietary,
                    schmeNm: drrReport -> uniqueTransactionIdentifierProprietarySchemeName to-string
        }}}

func Create_TradeTransaction50__6:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        txData TradeTransaction50__6 (1..1)

    set txData:
        TradeTransaction50__6 {
            txId: UniqueTransactionIdentifier2Choice__1 {
                unqTxIdr: GetTxId(drrReport),
                prtry: GenericIdentification175__4 {
                    id: if drrReport -> uniqueTransactionIdentifierProprietary exists
                        then drrReport -> uniqueTransactionIdentifierProprietary,
                    schmeNm: drrReport -> uniqueTransactionIdentifierProprietarySchemeName to-string
            }},
            derivEvt: GetDerivEvt5(drrReport)
        }

func Create_TradeTransaction50__7:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        txData TradeTransaction50__7 (1..1)

    set txData:
        TradeTransaction50__7 {
            txId: UniqueTransactionIdentifier2Choice__1 {
                unqTxIdr: GetTxId(drrReport),
                prtry: GenericIdentification175__4 {
                    id: if drrReport -> uniqueTransactionIdentifierProprietary exists
                        then drrReport -> uniqueTransactionIdentifierProprietary,
                    schmeNm: drrReport -> uniqueTransactionIdentifierProprietarySchemeName to-string
            }},
            derivEvt: GetDerivEvt6(drrReport)
        }

// TradeTransaction49 helper funcs
func GetTxId:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        uti iso20022.auth030.hkma.tr.UTIIdentifier (1..1)

    set uti: drrReport -> uniqueTransactionIdentifier

func GetPrrTxId:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        prrTxId UniqueTransactionIdentifier3Choice__1 (1..1)

    set prrTxId:
        UniqueTransactionIdentifier3Choice__1 {
            unqTxIdr: drrReport -> priorUTI,
            prtry: GenericIdentification175__4 {
                id: drrReport -> priorUTIProprietary,
                schmeNm: drrReport -> priorUTIProprietarySchemeName to-string
        }}

func GetCollPrtflCd:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        collPrtflCd CollateralPortfolioCode6Choice__1 (1..1)

    set collPrtflCd:
        CollateralPortfolioCode6Choice__1 {
            mrgnPrtflCd: MarginPortfolio4__1 {
                initlMrgnPrtflCd: PortfolioCode5Choice__1 {
                    prtfl: if drrReport -> collateralPortfolioIndicator = True
                        then PortfolioIdentification3__1 {
                            cd: drrReport -> initialMarginCollateralPortfolioCode
                        },
                    noPrtfl: if drrReport -> collateralPortfolioIndicator = False
                        then NotApplicable1Code -> NOAP
                },
                vartnMrgnPrtflCd: PortfolioCode5Choice__1 {
                    prtfl: if drrReport -> collateralPortfolioIndicator = True
                        then PortfolioIdentification3__1 {
                            cd: drrReport -> variationMarginCollateralPortfolioCode
                        },
                    noPrtfl: if drrReport -> collateralPortfolioIndicator = False
                        then NotApplicable1Code -> NOAP
        }}}

func GetPltfmIdr:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        pltfmIdr MICIdentifier (1..1)

    set pltfmIdr: drrReport -> platformIdentifier

func GetTxPric:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        txPric PriceData2__1 (1..1)

    set txPric:
        PriceData2__1 {
            pric: drrReport
                extract
                    SecuritiesTransactionPrice17Choice__1 {
                        mntryVal: if priceNotation = Monetary
                            then AmountAndDirection106__1 {
                                amt: ActiveOrHistoricCurrencyAnd13DecimalAmount {
                                    value: Abs(price -> monetary),
                                    ccy: drrReport -> priceCurrency to-string
                                },
                                sgn: if price -> monetary < 0
                                    then False
                            },
                        dcml: if priceNotation = Decimal
                            then price -> decimal
                    },
            unitOfMeasr: UnitOfMeasure8Choice__1 {
                cd: drrReport -> priceUnitOfMeasure
            },
            schdlPrd: drrReport -> priceSchedule
                extract
                    Schedule1__1 {
                        uadjstdFctvDt: effectiveDate,
                        uadjstdEndDt: endDate,
                        pric: SecuritiesTransactionPrice17Choice__2 {
                            mntryVal: AmountAndDirection106__2 {
                                amt: ActiveOrHistoricCurrencyAnd13DecimalAmount {
                                    value: Abs(price -> monetary),
                                    ccy: drrReport -> priceCurrency to-string
                            }},
                            dcml: price -> decimal
        }}}

func GetNtnlAmt:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        ntnlAmt NotionalAmountLegs5__1 (1..1)

    set ntnlAmt:
        NotionalAmountLegs5__1 {
            frstLeg: NotionalAmount5__1 {
                amt: AmountAndDirection106__3 {
                    amt: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                        value: Abs(drrReport -> leg1 -> notionalAmount),
                        ccy: drrReport -> leg1 -> notionalCurrency to-string
                    },
                    sgn: if drrReport -> leg1 -> notionalAmount < 0
                        then False
                },
                schdlPrd: drrReport -> leg1 -> notionalAmountSchedule
                    extract
                        Schedule11__1 {
                            uadjstdFctvDt: effectiveDate,
                            uadjstdEndDt: endDate,
                            amt: AmountAndDirection106__3 {
                                amt: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                                    value: Abs(value),
                                    ccy: drrReport -> leg1 -> notionalCurrency to-string
                                },
                                sgn: if value < 0 then False
            }}},
            scndLeg: NotionalAmount6__1 {
                amt: AmountAndDirection106__3 {
                    amt: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                        value: Abs(drrReport -> leg2 -> notionalAmount),
                        ccy: drrReport -> leg2 -> notionalCurrency to-string
                    },
                    sgn: if drrReport -> leg2 -> notionalAmount < 0
                        then False
                },
                schdlPrd: drrReport -> leg2 -> notionalAmountSchedule
                    extract
                        Schedule11__1 {
                            uadjstdFctvDt: effectiveDate,
                            uadjstdEndDt: endDate,
                            amt: AmountAndDirection106__3 {
                                amt: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                                    value: Abs(value),
                                    ccy: drrReport -> leg2 -> notionalCurrency to-string
                                },
                                sgn: if value < 0 then False
        },}}}

func GetNtnlQty:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        ntnlQty NotionalQuantityLegs5__1 (0..1)

    set ntnlQty:
        NotionalQuantityLegs5__1 {
            frstLeg: NotionalQuantity9__1 {
                ttlQty: drrReport -> leg1 -> totalNotionalQuantity,
                unitOfMeasr: UnitOfMeasure8Choice__1 {
                    cd: drrReport -> leg1 -> quantityUnitOfMeasure
                },
                dtls: QuantityOrTerm1Choice__1 {
                    term: QuantityTerm1__1 {
                        qty: drrReport -> leg1 -> notionalQuantity,
                        val: drrReport -> leg1 -> quantityFrequencyMultiplier,
                        tmUnit: drrReport -> leg1 -> quantityFrequency to-enum Frequency19Code__1
                    },
                    schdlPrd: drrReport -> leg1 -> notionalQuantitySchedule
                        extract
                            Schedule10__1 {
                                qty: drrReport -> leg1 -> notionalQuantity,
                                uadjstdFctvDt: drrReport -> effectiveDate,
                                uadjstdEndDt: endDate
            }}},
            scndLeg: NotionalQuantity9__1 {
                ttlQty: drrReport -> leg2 -> totalNotionalQuantity,
                unitOfMeasr: UnitOfMeasure8Choice__1 {
                    cd: drrReport -> leg2 -> quantityUnitOfMeasure
                },
                dtls: QuantityOrTerm1Choice__1 {
                    term: QuantityTerm1__1 {
                        qty: drrReport -> leg2 -> notionalQuantity,
                        val: drrReport -> leg2 -> quantityFrequencyMultiplier,
                        tmUnit: drrReport -> leg2 -> quantityFrequency to-enum Frequency19Code__1
                    },
                    schdlPrd: drrReport -> leg2 -> notionalQuantitySchedule
                        extract
                            Schedule10__1 {
                                qty: drrReport -> leg2 -> notionalQuantity,
                                uadjstdFctvDt: effectiveDate,
                                uadjstdEndDt: endDate
        }}}}

func GetExctnTmStmp:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        exctnTmStmp zonedDateTime (1..1)

    set exctnTmStmp: drrReport -> executionTimestamp

func GetFctvDt:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        fctvDt iso20022.auth030.hkma.tr.ISODate (1..1)

    set fctvDt: drrReport -> effectiveDate

func GetXprtnDt:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        xprtnDt iso20022.auth030.hkma.tr.ISODate (1..1)

    set xprtnDt: drrReport -> expirationDate

// DerivativeEvent6
func GetDerivEvt1:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        derivEvt DerivativeEvent6__1 (1..1)

    set derivEvt:
        DerivativeEvent6__1 {
            tp: GetDerivEvtTp(drrReport),
            id: GetDerivEvtId(drrReport),
            tmStmp: GetDerivEvtTmStmp(drrReport)
        }

func GetDerivEvt2:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        derivEvt DerivativeEvent6__2 (1..1)

    set derivEvt:
        DerivativeEvent6__2 {
            id: GetDerivEvtId(drrReport),
            tmStmp: GetDerivEvtTmStmp(drrReport),
            tp: GetDerivEvtTp2(drrReport)
        }

func GetDerivEvt3:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        derivEvt DerivativeEvent6__3 (1..1)

    set derivEvt:
        DerivativeEvent6__3 {
            id: GetDerivEvtId(drrReport),
            tmStmp: GetDerivEvtTmStmp(drrReport)
        }

func GetDerivEvt4:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        derivEvt DerivativeEvent6__4 (1..1)

    set derivEvt:
        DerivativeEvent6__4 {
            tmStmp: GetDerivEvtTmStmp(drrReport),
            tp: drrReport -> eventType to-enum DerivativeEventType3Code__3,
            id: GetDerivEvtId(drrReport)
        }

func GetDerivEvt5:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        derivEvt DerivativeEvent6__5 (1..1)

    set derivEvt:
        DerivativeEvent6__5 {
            id: GetDerivEvtId(drrReport)
        }

func GetDerivEvt6:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        derivEvt DerivativeEvent6__6 (1..1)

    set derivEvt:
        DerivativeEvent6__6 {
            tp: GetDerivEvtTp4(drrReport)
        }

func GetDerivEvtId:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        id EventIdentifier1Choice__1 (1..1)

    set id:
        EventIdentifier1Choice__1 {
            evtIdr: drrReport -> eventIdentifier
        }

func GetDerivEvtTp:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        tp DerivativeEventType3Code__1 (1..1)

    set tp: drrReport -> eventType to-enum DerivativeEventType3Code__1

func GetDerivEvtTp2:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        tp DerivativeEventType3Code__2 (1..1)

    set tp: drrReport -> eventType to-enum DerivativeEventType3Code__2

func GetDerivEvtTp4:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        tp DerivativeEventType3Code__4 (1..1)

    set tp: drrReport -> eventType to-enum DerivativeEventType3Code__4

func GetDerivEvtTmStmp:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        tmStmp DateAndDateTime2Choice__1 (1..1)

    set tmStmp:
        DateAndDateTime2Choice__1 {
            dtTm: drrReport -> eventTimestamp
        }

func GetTradClr:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        tradClr TradeClearing11__1 (1..1)

    set tradClr:
        TradeClearing11__1 {
            clrSts: Cleared23Choice__1 {
                clrd: if drrReport -> cleared = Y
                    then ClearingPartyAndTime21Choice__1 {
                        dtls: ClearingPartyAndTime22__1 {
                            ccp: Create_OrganisationIdentification15Choice__3(
                                    drrReport -> centralCounterpartyIdentifierFormat,
                                    drrReport -> centralCounterparty,
                                    drrReport -> centralCounterpartySchemeName
                                ),
                            clrDtTm: drrReport -> clearingTimestamp
                }},
                intndToClear: if drrReport -> cleared = I
                    then ClearingPartyAndTime22Choice__1 {
                        dtls: ClearingPartyAndTime23__1 {
                            ccp: OrganisationIdentification15Choice__6 {
                                lei: drrReport -> centralCounterparty,
                                othr: OrganisationIdentification38__2 {
                                    id: GenericIdentification175__2 {
                                        id: drrReport -> centralCounterparty,
                                        schmeNm: drrReport -> centralCounterpartySchemeName to-enum iso20022.auth030.hkma.tr.HKTRPartyScheme
                }}}}},
                nonClrd: if drrReport -> cleared = N
                    then ClearingExceptionOrExemption3Choice__1 {
                        rsn: NoReasonCode -> NORE
            }},
            intraGrp: drrReport -> intragroup
        }

func GetIntrstRate:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        intrstRate InterestRateLegs14__1 (1..1)

    set intrstRate:
        InterestRateLegs14__1 {
            frstLeg: InterestRate33Choice__1 {
                fxd: if drrReport -> leg1 -> fixedRate exists
                    then Create_FixedRate(
                            drrReport -> leg1 -> fixedRate,
                            drrReport -> leg1 -> periodicPayment -> fixedRateDayCountConvention to-enum iso20022.auth030.hkma.tr.InterestComputationMethod4Code,
                            drrReport -> leg1 -> periodicPayment -> fixedRatePaymentFrequencyPeriod to-enum Frequency13Code__1,
                            drrReport -> leg1 -> periodicPayment -> fixedRatePaymentFrequencyPeriodMultiplier
                        ),
                fltg: if drrReport -> leg1 -> fixedRate exists = False
                    then Create_FloatingRate(
                            drrReport -> leg1 -> periodicPayment -> floatingRateIdentifier,
                            drrReport -> leg1 -> periodicPayment -> nameOfTheFloatingRate,
                            drrReport -> leg1 -> periodicPayment -> floatingRateIndicator,
                            drrReport -> leg1 -> spread -> monetary,
                            drrReport -> leg1 -> spread -> decimal,
                            drrReport -> leg1 -> spread -> basis,
                            drrReport -> leg1 -> spreadCurrency to-string,
                            drrReport -> leg1 -> spreadNotation,
                            drrReport -> leg1 -> periodicPayment -> floatingRateDayCountConvention to-enum iso20022.auth030.hkma.tr.InterestComputationMethod4Code,
                            drrReport -> leg1 -> periodicPayment -> floatingRatePaymentFrequencyPeriod to-enum Frequency13Code__1,
                            drrReport -> leg1 -> periodicPayment -> floatingRatePaymentFrequencyPeriodMultiplier
                        )
            },
            scndLeg: InterestRate33Choice__1 {
                fxd: if drrReport -> leg2 -> fixedRate exists
                    then Create_FixedRate(
                            drrReport -> leg2 -> fixedRate,
                            drrReport -> leg2 -> periodicPayment -> fixedRateDayCountConvention to-enum iso20022.auth030.hkma.tr.InterestComputationMethod4Code,
                            drrReport -> leg2 -> periodicPayment -> fixedRatePaymentFrequencyPeriod to-enum Frequency13Code__1,
                            drrReport -> leg2 -> periodicPayment -> fixedRatePaymentFrequencyPeriodMultiplier
                        ),
                fltg: if drrReport -> leg2 -> fixedRate exists = False
                    then Create_FloatingRate(
                            drrReport -> leg2 -> periodicPayment -> floatingRateIdentifier,
                            drrReport -> leg2 -> periodicPayment -> nameOfTheFloatingRate,
                            drrReport -> leg2 -> periodicPayment -> floatingRateIndicator,
                            drrReport -> leg2 -> spread -> monetary,
                            drrReport -> leg2 -> spread -> decimal,
                            drrReport -> leg2 -> spread -> basis,
                            drrReport -> leg2 -> spreadCurrency to-string,
                            drrReport -> leg2 -> spreadNotation,
                            drrReport -> leg2 -> periodicPayment -> floatingRateDayCountConvention to-enum iso20022.auth030.hkma.tr.InterestComputationMethod4Code,
                            drrReport -> leg2 -> periodicPayment -> floatingRatePaymentFrequencyPeriod to-enum Frequency13Code__1,
                            drrReport -> leg2 -> periodicPayment -> floatingRatePaymentFrequencyPeriodMultiplier
                        )
        },}

func Create_FixedRate:
    inputs:
        fixedRate drr.standards.iso.Max11Number (0..1)
        fixedRateDayCountConvention iso20022.auth030.hkma.tr.InterestComputationMethod4Code (0..1)
        fixedRatePaymentFrequencyPeriod Frequency13Code__1 (0..1)
        fixedRatePaymentFrequencyPeriodMultiplier iso20022.auth030.hkma.tr.Max3Number (0..1)
    output:
        out FixedRate10__1 (1..1)

    set out:
        FixedRate10__1 {
            rate: SecuritiesTransactionPrice14Choice__1 {
                dcml: fixedRate
            },
            dayCnt: InterestComputationMethodFormat7__1 {
                cd: fixedRateDayCountConvention
            },
            pmtFrqcy: InterestRateFrequency3Choice__1 {
                term: InterestRateContractTerm4__1 {
                    unit: fixedRatePaymentFrequencyPeriod,
                    val: fixedRatePaymentFrequencyPeriodMultiplier
        }}}

func Create_FloatingRate:
    inputs:
        identifierOfFloatingRate iso20022.auth030.hkma.tr.ISINOct2015Identifier (0..1)
        nameOfTheFloatingRate Max50AlphaNumericText (0..1)
        indicatorOfTheFloatingRate IndexEnum (0..1)
        spreadOfLeg1Monetary iso20022.auth030.hkma.tr.BaseOne18Rate (0..1)
        spreadOfLeg1Decimal iso20022.auth030.hkma.tr.BaseOneRate (0..1)
        spreadOfLeg1Basis drr.standards.iso.BasisFormat (0..1)
        spreadCurrencyOfLeg1 string (0..1)
        spreadOfLeg1Notation PriceNotationEnum (0..1)
        floatingRateDayCountConvention iso20022.auth030.hkma.tr.InterestComputationMethod4Code (0..1)
        floatingRatePaymentFrequencyPeriod Frequency13Code__1 (0..1)
        floatingRatePaymentFrequencyPeriodMultiplier iso20022.auth030.hkma.tr.Max3Number (0..1)
    output:
        out FloatingRate13__1 (1..1)

    set out:
        FloatingRate13__1 {
            sprd: SecuritiesTransactionPrice20Choice__1 {
                mntryVal: if spreadOfLeg1Notation = Monetary
                    then AmountAndDirection106__1 {
                        amt: ActiveOrHistoricCurrencyAnd13DecimalAmount {
                            value: Abs(spreadOfLeg1Monetary),
                            ccy: spreadCurrencyOfLeg1 to-string
                        },
                        sgn: if spreadOfLeg1Monetary < 0 then False
                    },
                dcml: if spreadOfLeg1Notation = Decimal
                    then spreadOfLeg1Decimal,
                bsisPtSprd: if spreadOfLeg1Notation = Basis
                    then spreadOfLeg1Basis
            },
            dayCnt: InterestComputationMethodFormat7__1 {
                cd: floatingRateDayCountConvention
            },
            pmtFrqcy: InterestRateFrequency3Choice__1 {
                term: InterestRateContractTerm4__1 {
                    unit: floatingRatePaymentFrequencyPeriod,
                    val: floatingRatePaymentFrequencyPeriodMultiplier
            }},
            id: identifierOfFloatingRate,
            nm: nameOfTheFloatingRate,
            rate: FloatingRateIdentification8Choice__1 {
                cd: indicatorOfTheFloatingRate to-string
            },
            refPrd: InterestRateContractTerm4__1 {
                unit: floatingRatePaymentFrequencyPeriod to-enum Frequency13Code__1,
                val: floatingRatePaymentFrequencyPeriodMultiplier
        }}

func GetCcy:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        ccy CurrencyExchange22__1 (1..1)

    set ccy:
        CurrencyExchange22__1 {
            xchgRate: drrReport -> exchangeRate,
            xchgRateBsis: ExchangeRateBasis1Choice__1 {
                ccyPair: ExchangeRateBasis1 {
                    baseCcy: if drrReport -> assetClass = CURR
                        then SubString(drrReport -> exchangeRateBasis, 1, 3),
                    qtdCcy: if drrReport -> assetClass = CURR
                        then SubString(drrReport -> exchangeRateBasis, 5, 3)
        }}}

func GetOptn:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        optn OptionOrSwaption11__1 (1..1)

    set optn:
        OptionOrSwaption11__1 {
            strkPric: drrReport
                extract
                    SecuritiesTransactionPrice17Choice__1 {
                        mntryVal: if strikePriceNotation = Monetary
                            then AmountAndDirection106__1 {
                                amt: ActiveOrHistoricCurrencyAnd13DecimalAmount {
                                    value: Abs(strikePrice -> monetary),
                                    ccy: if StringLength(drrReport -> strikePriceCurrency) > 3
                                        then SubString(
                                            drrReport -> strikePriceCurrency,
                                            5,
                                            3
                                        )
                                        to-string
                                    else drrReport -> strikePriceCurrency to-string
                                },
                                sgn: if strikePrice -> monetary < 0
                                    then False
                            },
                        dcml: if strikePriceNotation = Decimal
                            then strikePrice -> decimal
                    },
            callAmt: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                value: drrReport -> callAmount,
                ccy: drrReport -> callCurrency to-string
            },
            putAmt: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                value: drrReport -> putAmount,
                ccy: drrReport -> putCurrency to-string
            },
            prmAmt: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                value: drrReport -> optionPremiumAmount,
                ccy: if drrReport -> optionPremiumCurrency exists
                    then drrReport -> optionPremiumCurrency to-string
                else if drrReport -> optionPremiumAmount = 0
                then drrReport -> leg1 -> settlementCurrency to-string
            },
            prmPmtDt: drrReport -> optionPremiumPaymentDate,
            mtrtyDtOfUndrlyg: drrReport -> maturityDateOfTheUnderlying,
            brrrLvls: Create_OptionBarrierLevel1Choice__1(drrReport),
            tp: drrReport -> optionType to-enum OptionType2Code,
            mbddTp: drrReport -> embeddedOptionType to-enum EmbeddedType1Code,
            exrcStyle: drrReport -> optionStyle to-enum OptionStyle6Code,
            exrcDt: ExerciseDate1Choice__1 {
                frstExrcDt: drrReport -> firstExerciseDate
            },
            strkPricSchdl: drrReport -> strikePriceSchedule
                extract
                    Schedule4__1 {
                        uadjstdFctvDt: effectiveDate,
                        uadjstdEndDt: endDate,
                        pric: SecuritiesTransactionPrice17Choice__2 {
                            mntryVal: AmountAndDirection106__2 {
                                amt: ActiveOrHistoricCurrencyAnd13DecimalAmount {
                                    value: price -> monetary,
                                    ccy: drrReport -> strikePriceCurrency
                            }},
                            dcml: price -> decimal
        }}}

func Create_OptionBarrierLevel1Choice__1:
    inputs:
        drrReport HKMATransactionReport (0..1)
    output:
        brrrLvls OptionBarrierLevel1Choice__1 (0..1)
    set brrrLvls:
        OptionBarrierLevel1Choice__1 {
            sngl: drrReport -> barrier
                extract
                    SecuritiesTransactionPrice23Choice__1 {
                        mntryVal: if _single -> notation = Monetary
                            then AmountAndDirection106__1 {
                                amt: ActiveOrHistoricCurrencyAnd13DecimalAmount {
                                    value: Abs(_single -> price -> monetary),
                                    ccy: _single -> currency to-string
                                },
                                sgn: if _single -> price -> monetary < 0
                                    then False
                            },
                        dcml: if _single -> notation = Decimal
                            then _single -> price -> decimal
                    },
            mltpl: OptionMultipleBarrierLevels1__1 {
                lwrLvl: drrReport -> barrier
                    extract
                        SecuritiesTransactionPrice23Choice__1 {
                            mntryVal: if lower -> notation = Monetary
                                then AmountAndDirection106__1 {
                                    amt: ActiveOrHistoricCurrencyAnd13DecimalAmount {
                                        value: Abs(lower -> price -> monetary),
                                        ccy: lower -> currency to-string
                                    },
                                    sgn: if lower -> price -> monetary < 0
                                        then False
                                },
                            dcml: if lower -> notation = Decimal
                                then lower -> price -> decimal
                        },
                upperLvl: drrReport -> barrier
                    extract
                        SecuritiesTransactionPrice23Choice__1 {
                            mntryVal: if upper -> notation = Monetary
                                then AmountAndDirection106__1 {
                                    amt: ActiveOrHistoricCurrencyAnd13DecimalAmount {
                                        value: Abs(upper -> price -> monetary),
                                        ccy: upper -> currency to-string
                                    },
                                    sgn: if upper -> price -> monetary < 0
                                        then False
                                },
                            dcml: if upper -> notation = Decimal
                                then upper -> price -> decimal
        }}}

func GetCdt:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        cdt CreditDerivative4__1 (1..1)

    set cdt:
        CreditDerivative4__1 {
            indxFctr: drrReport -> indexFactor,
            trch: TrancheIndicator3Choice__1 {
                trnchd: Tranche3 {
                    attchmntPt: drrReport -> cdSIndexAttachmentPoint,
                    dtchmntPt: drrReport -> cdSIndexDetachmentPoint
            }},
            snrty: drrReport -> seniority to-enum DebtInstrumentSeniorityType2Code,
            refPty: DerivativePartyIdentification1Choice {
                ctry: if drrReport -> referenceEntityFormat = Country
                    then drrReport -> referenceEntity,
                ctrySubDvsn: empty, // Sprint 2025-07 TH Comment: Not possible to populate CtrySubDvsn.
                lei: if drrReport -> referenceEntityFormat = LEI
                    then drrReport -> referenceEntity
            },
            srs: drrReport -> series,
            vrsn: drrReport -> seriesVersion
        }

func GetOthrPmt:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        othrPmt OtherPayment5__1 (0..*)

    add othrPmt:
        drrReport -> otherPayment
            extract
                OtherPayment5__1 {
                    pmtTp: PaymentType5Choice__1 {
                        tp: paymentType to-enum iso20022.auth030.hkma.tr.PaymentType4Code
                    },
                    pmtAmt: AmountAndDirection106__4 {
                        amt: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                            value: amount,
                            ccy: currency to-string
                    }},
                    pmtDt: date,
                    pmtPyer: PartyIdentification236Choice__1 {
                        lgl: Create_OrganisationIdentification15Choice__3(
                                payerFormat to-enum common.PartyIdentifierFormat2Enum,
                                payer,
                                payerSchemeName to-enum common.HKTRPartyScheme
                            ),
                        ntrl: NaturalPersonIdentification2__1 {
                            id: GenericIdentification175__1 {
                                id: if payerFormat = LeiAndPerson
                                    then payer
                    }}},
                    pmtRcvr: PartyIdentification236Choice__1 {
                        lgl: Create_OrganisationIdentification15Choice__3(
                                receiverFormat to-enum common.PartyIdentifierFormat2Enum,
                                receiver,
                                receiverSchemeName to-enum common.HKTRPartyScheme
                            ),
                        ntrl: NaturalPersonIdentification2__1 {
                            id: GenericIdentification175__1 {
                                id: if receiverFormat = LeiAndPerson
                                    then receiver
        }}}}

func GetPackg:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        packg Package4__1 (1..1)

    set packg:
        Package4__1 {
            cmplxTradId: drrReport -> packageIdentifier,
            fxSwpLkId: drrReport -> swapLinkID,
            pric: drrReport
                extract
                    SecuritiesTransactionPrice17Choice__1 {
                        mntryVal: if packageTransactionPriceNotation = Monetary
                            then AmountAndDirection106__1 {
                                amt: ActiveOrHistoricCurrencyAnd13DecimalAmount {
                                    value: Abs(packageTransactionPrice -> monetary),
                                    ccy: packageTransactionPriceCurrency to-string
                                },
                                sgn: if packageTransactionPrice -> monetary < 0
                                    then False
                            },
                        dcml: if packageTransactionPriceNotation = Decimal
                            then packageTransactionPrice -> decimal
                    },
            sprd: drrReport
                extract
                    SecuritiesTransactionPrice20Choice__1 {
                        mntryVal: if packageTransactionSpreadNotation = Monetary
                            then AmountAndDirection106__1 {
                                amt: ActiveOrHistoricCurrencyAnd13DecimalAmount {
                                    value: Abs(packageTransactionSpread -> monetary),
                                    ccy: packageTransactionSpreadCurrency to-string
                                },
                                sgn: if packageTransactionSpread -> monetary < 0
                                    then False
                            },
                        dcml: if packageTransactionSpreadNotation = Decimal
                            then packageTransactionSpread -> decimal,
                        bsisPtSprd: if packageTransactionSpreadNotation = Basis
                            then packageTransactionSpread -> basis
        },}

func Create_TechnicalAttributes5__1:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        techAttrbts TechnicalAttributes5__1 (1..1)

    set techAttrbts:
        TechnicalAttributes5__1 {
            techRcrdId: drrReport -> technicalRecordId
        }

func Create_SupplementaryData1:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        splmtryData SupplementaryData1 (1..1)

    set splmtryData:
        SupplementaryData1 {
            plcAndNm: empty, // Sprint 2025-07 TH Comment: Not present in DTCC specifications. Optional field.
            envlp: Create_SupplementaryDataEnvelope1(drrReport)
        }

func Create_SupplementaryDataEnvelope1:
    [codeImplementation]
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        envlp SupplementaryDataEnvelope1 (1..1)

func Create_AssetClassCommodity7Choice:
    inputs:
        drrReport HKMATransactionReport (1..1)
    output:
        cmmdty AssetClassCommodity7Choice (1..1)

    set cmmdty:
        AssetClassCommodity7Choice {
            agrcltrl: AssetClassCommodityAgricultural6Choice {
                grnOilSeed: if drrReport -> assetClass to-string = "COMM"
                        and drrReport -> baseProduct = "AGRI"
                        and drrReport -> subProduct = "GROS"
                    then AgriculturalCommodityOilSeed2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType1Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType1Code,
                        addtlSubPdct: drrReport -> furtherSubProduct to-enum AssetClassDetailedSubProductType1Code
                    },
                soft: if drrReport -> assetClass to-string = "COMM"
                        and drrReport -> baseProduct = "AGRI"
                        and drrReport -> subProduct = "SOFT"
                    then AgriculturalCommoditySoft2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType1Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType2Code,
                        addtlSubPdct: drrReport -> furtherSubProduct to-enum AssetClassDetailedSubProductType2Code
                    },
                ptt: if drrReport -> assetClass to-string = "COMM"
                        and drrReport -> baseProduct = "AGRI"
                        and drrReport -> subProduct = "POTA"
                    then AgriculturalCommodityPotato2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType1Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType45Code
                    },
                olvOil: if drrReport -> assetClass to-string = "COMM"
                        and drrReport -> baseProduct = "AGRI"
                        and drrReport -> subProduct = "OOLI"
                    then AgriculturalCommodityOliveOil3 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType1Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType3Code,
                        addtlSubPdct: drrReport -> furtherSubProduct to-enum AssetClassDetailedSubProductType29Code
                    },
                dairy: if drrReport -> assetClass to-string = "COMM"
                        and drrReport -> baseProduct = "AGRI"
                        and drrReport -> subProduct = "DIRY"
                    then AgriculturalCommodityDairy2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType1Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType20Code
                    },
                frstry: if drrReport -> assetClass to-string = "COMM"
                        and drrReport -> baseProduct = "AGRI"
                        and drrReport -> subProduct = "FRST"
                    then AgriculturalCommodityForestry2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType1Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType21Code
                    },
                sfd: if drrReport -> assetClass to-string = "COMM"
                        and drrReport -> baseProduct = "AGRI"
                        and drrReport -> subProduct = "SEAF"
                    then AgriculturalCommoditySeafood2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType1Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType23Code
                    },
                liveStock: if drrReport -> assetClass to-string = "COMM"
                        and drrReport -> baseProduct = "AGRI"
                        and drrReport -> subProduct = "LSTK"
                    then AgriculturalCommodityLiveStock2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType1Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType22Code
                    },
                grn: if drrReport -> assetClass to-string = "COMM"
                        and drrReport -> baseProduct = "AGRI"
                        and drrReport -> subProduct = "GRIN"
                    then AgriculturalCommodityGrain3 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType1Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType5Code,
                        addtlSubPdct: drrReport -> furtherSubProduct to-enum AssetClassDetailedSubProductType30Code
                    },
                othr: if drrReport -> assetClass to-string = "COMM"
                        and drrReport -> baseProduct = "AGRI"
                        and drrReport -> subProduct = "OTHR"
                    then AgriculturalCommodityOther2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType1Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType49Code
            },},
            nrgy: AssetClassCommodityEnergy3Choice {
                elctrcty: if drrReport -> assetClass to-string = "COMM"
                        and drrReport -> baseProduct = "NRGY"
                        and drrReport -> subProduct = "ELEC"
                    then EnergyCommodityElectricity2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType2Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType6Code,
                        addtlSubPdct: drrReport -> furtherSubProduct to-enum AssetClassDetailedSubProductType5Code
                    },
                ntrlGas: if drrReport -> assetClass to-string = "COMM"
                        and drrReport -> baseProduct = "NRGY"
                        and drrReport -> subProduct = "NGAS"
                    then EnergyCommodityNaturalGas3 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType2Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType7Code,
                        addtlSubPdct: drrReport -> furtherSubProduct to-enum AssetClassDetailedSubProductType31Code
                    },
                oil: if drrReport -> assetClass to-string = "COMM"
                        and drrReport -> baseProduct = "NRGY"
                        and drrReport -> subProduct = "OILP"
                    then EnergyCommodityOil3 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType2Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType8Code,
                        addtlSubPdct: drrReport -> furtherSubProduct to-enum AssetClassDetailedSubProductType32Code
                    },
                coal: if drrReport -> assetClass to-string = "COMM"
                        and drrReport -> baseProduct = "NRGY"
                        and drrReport -> subProduct = "COAL"
                    then EnergyCommodityCoal2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType2Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType24Code
                    },
                intrNrgy: if drrReport -> assetClass to-string = "COMM"
                        and drrReport -> baseProduct = "NRGY"
                        and drrReport -> subProduct = "INRG"
                    then EnergyCommodityInterEnergy2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType2Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType26Code
                    },
                rnwblNrgy: if drrReport -> assetClass to-string = "COMM"
                        and drrReport -> baseProduct = "NRGY"
                        and drrReport -> subProduct = "RNNG"
                    then EnergyCommodityRenewableEnergy2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType2Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType28Code
                    },
                lghtEnd: if drrReport -> assetClass to-string = "COMM"
                        and drrReport -> baseProduct = "NRGY"
                        and drrReport -> subProduct = "LGHT"
                    then EnergyCommodityLightEnd2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType2Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType27Code
                    },
                dstllts: if drrReport -> assetClass to-string = "COMM"
                        and drrReport -> baseProduct = "NRGY"
                        and drrReport -> subProduct = "DIST"
                    then EnergyCommodityDistillates2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType2Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType25Code
                    },
                othr: if drrReport -> assetClass to-string = "COMM"
                        and drrReport -> baseProduct = "NRGY"
                        and drrReport -> subProduct = "OTHR"
                    then EnergyCommodityOther2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType2Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType49Code
            }},
            envttl: AssetClassCommodityEnvironmental3Choice {
                emssns: if drrReport -> assetClass to-string = "COMM"
                        and drrReport -> baseProduct = "ENVR"
                        and drrReport -> subProduct = "EMIS"
                    then EnvironmentalCommodityEmission3 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType3Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType10Code,
                        addtlSubPdct: drrReport -> furtherSubProduct to-enum AssetClassDetailedSubProductType8Code
                    },
                wthr: if drrReport -> assetClass to-string = "COMM"
                        and drrReport -> baseProduct = "ENVR"
                        and drrReport -> subProduct = "WTHR"
                    then EnvironmentalCommodityWeather2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType3Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType30Code
                    },
                crbnRltd: if drrReport -> assetClass to-string = "COMM"
                        and drrReport -> baseProduct = "ENVR"
                        and drrReport -> subProduct = "CRBR"
                    then EnvironmentalCommodityCarbonRelated2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType3Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType29Code
                    },
                othr: if drrReport -> assetClass to-string = "COMM"
                        and drrReport -> baseProduct = "ENVR"
                        and drrReport -> subProduct = "OTHR"
                    then EnvironmentCommodityOther2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType3Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType49Code
            }},
            frtlzr: AssetClassCommodityFertilizer4Choice {
                ammn: if drrReport -> assetClass to-string = "COMM"
                        and drrReport -> baseProduct = "FRTL"
                        and drrReport -> subProduct = "AMMO"
                    then FertilizerCommodityAmmonia2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType5Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType39Code
                    },
                dmmnmPhspht: if drrReport -> assetClass to-string = "COMM"
                        and drrReport -> baseProduct = "FRTL"
                        and drrReport -> subProduct = "DAPH"
                    then FertilizerCommodityDiammoniumPhosphate2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType5Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType40Code
                    },
                ptsh: if drrReport -> assetClass to-string = "COMM"
                        and drrReport -> baseProduct = "FRTL"
                        and drrReport -> subProduct = "PTSH"
                    then FertilizerCommodityPotash2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType5Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType41Code
                    },
                slphr: if drrReport -> assetClass to-string = "COMM"
                        and drrReport -> baseProduct = "FRTL"
                        and drrReport -> subProduct = "SLPH"
                    then FertilizerCommoditySulphur2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType5Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType42Code
                    },
                urea: if drrReport -> assetClass to-string = "COMM"
                        and drrReport -> baseProduct = "FRTL"
                        and drrReport -> subProduct = "UREA"
                    then FertilizerCommodityUrea2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType5Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType43Code
                    },
                ureaAndAmmnmNtrt: if drrReport -> assetClass to-string = "COMM"
                        and drrReport -> baseProduct = "FRTL"
                        and drrReport -> subProduct = "UAAN"
                    then FertilizerCommodityUreaAndAmmoniumNitrate2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType5Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType44Code
                    },
                othr: if drrReport -> assetClass to-string = "COMM"
                        and drrReport -> baseProduct = "FRTL"
                        and drrReport -> subProduct = "OTHR"
                    then FertilizerCommodityOther2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType5Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType49Code
            }},
            frght: AssetClassCommodityFreight4Choice {
                dry: if drrReport -> assetClass to-string = "COMM"
                        and drrReport -> baseProduct = "FRGT"
                        and drrReport -> subProduct = "DRYF"
                    then FreightCommodityDry3 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType4Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType31Code,
                        addtlSubPdct: drrReport -> furtherSubProduct to-enum AssetClassDetailedSubProductType33Code
                    },
                wet: if drrReport -> assetClass to-string = "COMM"
                        and drrReport -> baseProduct = "FRGT"
                        and drrReport -> subProduct = "WETF"
                    then FreightCommodityWet3 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType4Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType32Code,
                        addtlSubPdct: drrReport -> furtherSubProduct to-enum AssetClassDetailedSubProductType34Code
                    },
                cntnrShip: if drrReport -> assetClass to-string = "COMM"
                        and drrReport -> baseProduct = "FRGT"
                        and drrReport -> subProduct = "CSHP"
                    then FreightCommodityContainerShip2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType4Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType46Code
                    },
                othr: if drrReport -> assetClass to-string = "COMM"
                        and drrReport -> baseProduct = "FRGT"
                        and drrReport -> subProduct = "OTHR"
                    then FreightCommodityOther2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType4Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType49Code
            }},
            indx: AssetClassCommodityIndex1 {
                basePdct: if drrReport -> assetClass to-string = "COMM"
                        and drrReport -> baseProduct = "INDX"
                    then drrReport -> baseProduct to-enum AssetClassProductType16Code
            },
            indstrlPdct: AssetClassCommodityIndustrialProduct2Choice {
                cnstrctn: if drrReport -> assetClass to-string = "COMM"
                        and drrReport -> baseProduct = "INDP"
                        and drrReport -> subProduct = "CSTR"
                    then IndustrialProductCommodityConstruction2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType6Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType33Code
                    },
                manfctg: if drrReport -> assetClass to-string = "COMM"
                        and drrReport -> baseProduct = "INDP"
                        and drrReport -> subProduct = "MFTG"
                    then IndustrialProductCommodityManufacturing2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType6Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType34Code
            }},
            infltn: if drrReport -> assetClass to-string = "COMM"
                    and drrReport -> baseProduct = "INFL"
                then AssetClassCommodityInflation1 {
                    basePdct: drrReport -> baseProduct to-enum AssetClassProductType12Code
                },
            metl: AssetClassCommodityMetal2Choice {
                nonPrcs: if drrReport -> assetClass to-string = "COMM"
                        and drrReport -> baseProduct = "METL"
                        and drrReport -> subProduct = "NPRM"
                    then MetalCommodityNonPrecious2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType7Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType15Code,
                        addtlSubPdct: drrReport -> furtherSubProduct to-enum AssetClassDetailedSubProductType10Code
                    },
                prcs: if drrReport -> assetClass to-string = "COMM"
                        and drrReport -> baseProduct = "METL"
                        and drrReport -> subProduct = "PRME"
                    then MetalCommodityPrecious2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType7Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType16Code,
                        addtlSubPdct: drrReport -> furtherSubProduct to-enum AssetClassDetailedSubProductType11Code
            }},
            multiCmmdtyExtc: if drrReport -> assetClass to-string = "COMM"
                    and drrReport -> baseProduct = "MCEX"
                then AssetClassCommodityMultiCommodityExotic1 {
                    basePdct: drrReport -> baseProduct to-enum AssetClassProductType13Code
                },
            offclEcnmcSttstcs: if drrReport -> assetClass to-string = "COMM"
                    and drrReport -> baseProduct = "OEST"
                then AssetClassCommodityOfficialEconomicStatistics1 {
                    basePdct: drrReport -> baseProduct to-enum AssetClassProductType14Code
                },
            othr: if drrReport -> assetClass to-string = "COMM"
                    and drrReport -> baseProduct = "OTHR"
                then AssetClassCommodityOther1 {
                    basePdct: drrReport -> baseProduct to-enum AssetClassProductType15Code
                },
            othrC10: if drrReport -> assetClass to-string = "COMM"
                    and drrReport -> baseProduct = "OTHC"
                then AssetClassCommodityC10Other1 {
                    basePdct: drrReport -> baseProduct to-enum AssetClassProductType11Code
                },
            ppr: AssetClassCommodityPaper5Choice {
                cntnrBrd: if drrReport -> assetClass to-string = "COMM"
                        and drrReport -> baseProduct = "PAPR"
                        and drrReport -> subProduct = "CBRD"
                    then PaperCommodityContainerBoard2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType8Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType35Code
                    },
                nwsprnt: if drrReport -> assetClass to-string = "COMM"
                        and drrReport -> baseProduct = "PAPR"
                        and drrReport -> subProduct = "NSPT"
                    then PaperCommodityNewsprint2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType8Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType36Code
                    },
                pulp: if drrReport -> assetClass to-string = "COMM"
                        and drrReport -> baseProduct = "PAPR"
                        and drrReport -> subProduct = "PULP"
                    then PaperCommodityPulp2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType8Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType37Code
                    },
                rcvrdPpr: if drrReport -> assetClass to-string = "COMM"
                        and drrReport -> baseProduct = "PAPR"
                        and drrReport -> subProduct = "RCVP"
                    then PaperCommodityRecoveredPaper3 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType8Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType50Code
                    },
                othr: if drrReport -> assetClass to-string = "COMM"
                        and drrReport -> baseProduct = "PAPR"
                        and drrReport -> subProduct = "OTHR"
                    then PaperCommodityOther1 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType8Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType49Code
            }},
            plprpln: AssetClassCommodityPolypropylene4Choice {
                plstc: if drrReport -> assetClass to-string = "COMM"
                        and drrReport -> baseProduct = "POLY"
                        and drrReport -> subProduct = "PLST"
                    then PolypropyleneCommodityPlastic2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType9Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType18Code
                    },
                othr: if drrReport -> assetClass to-string = "COMM"
                        and drrReport -> baseProduct = "POLY"
                        and drrReport -> subProduct = "OTHR"
                    then PolypropyleneCommodityOther2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType9Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType49Code
        }}}
