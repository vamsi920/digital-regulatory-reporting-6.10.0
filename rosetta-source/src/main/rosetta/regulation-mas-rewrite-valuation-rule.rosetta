namespace drr.regulation.mas.rewrite.valuation
version "${project.version}"

import cdm.base.datetime.*
import cdm.base.staticdata.identifier.*
import cdm.base.staticdata.party.*

import drr.regulation.common.*
import drr.regulation.mas.*
import drr.standards.iosco.cde.version3.* as cde
import drr.standards.iso.*

corpus Dissemination Valuation

report MAS Valuation in T+1
  	from ValuationReportInstruction
  	when ReportableProduct
  	with type MASValuationReport

eligibility rule ReportableProduct from ValuationReportInstruction: <"When eligible for ASIC">
    [regulatoryReference MAS Valuation
        provision "Demonstrative eligibility rule for display"]
    True

reporting rule Counterparty1 from ValuationReportInstruction: <"Counterparty 1">
    [regulatoryReference MAS Valuation dataElement "1" field "Counterparty 1"
        provision "Identifier of Counterparty 1."]
    extract PartyLei(reportingSide -> reportingParty -> partyId)
        as "1 Counterparty 1"

reporting rule Counterparty2 from ValuationReportInstruction: <"Counterparty 2">
    [regulatoryReference MAS Valuation dataElement "2" field "Counterparty 2"
        provision "Identifier of Counterparty 2"]
    extract
        if (reportingSide -> reportingCounterparty -> partyId -> identifierType any = PartyIdentifierTypeEnum -> LEI
                or reportingSide -> reportingCounterparty -> personRole -> role any = NaturalPersonRoleEnum -> Buyer
                or reportingSide -> reportingCounterparty -> personRole -> role any = NaturalPersonRoleEnum -> Seller)
        then PartyLeiAndPersonByRoles(
                    reportingSide -> reportingCounterparty,
                    reportingSide -> reportingParty
                )
        else reportingSide -> reportingCounterparty -> partyId -> identifier first
        as "2 Counterparty 2"

reporting rule Counterparty2IdentifierType from ValuationReportInstruction: <"Counterparty 2 Identifier Type">
    [regulatoryReference MAS Valuation dataElement "3" field "Counterparty 2 Identifier Type"
        provision "Indicator of whether LEI (including pre-LEI) was used to identify Counterparty 2."]
    extract reportingSide -> reportingCounterparty
    then extract
        if personRole -> role any = NaturalPersonRoleEnum -> Buyer
                or personRole -> role any = NaturalPersonRoleEnum -> Seller
                or partyId -> identifierType all <> PartyIdentifierTypeEnum -> LEI
        then False
        else if PartyLei(partyId) exists
        then True
        as "3 Counterparty 2 Identifier Type"

reporting rule ReportingSpecifiedPerson from ValuationReportInstruction: <"Reporting specified person">
    [regulatoryReference MAS Valuation dataElement "8" field "Reporting specified person"
        provision "Identifier of the specified person with the reporting obligation in respect of the contract."]
    extract ExtractPartyResponsibleForReportingIdentifier(reportingSide)
        as "8 Reporting specified person"

reporting rule DataSubmitter from ValuationReportInstruction: <"Data submitter">
    [regulatoryReference MAS Valuation dataElement "9" field "Data submitter"
        provision "Identifier of the entity submitting information on the contract, which is reported to a licensed trade repository or licensed foreign trade repository."]
    extract ExtractReportSubmittingPartyIdentifier(reportingSide)
        as "9 Data submitter"

reporting rule MASUniqueTransactionIdentifier from ValuationReportInstruction: <"Unique Transaction Identifier (UTI)">
    [regulatoryReference MAS Valuation dataElement "10" field "Unique Transaction Identifier (UTI)"
        provision "Unique identifier to denote the contract."]
    extract
        if GetRegimeSpecificIdentifiers(
                reportableInformation,
                SupervisoryBodyEnum -> MAS,
                TradeIdentifierTypeEnum -> UniqueTransactionIdentifier
            )
            exists
        then GetRegimeSpecificIdentifiers(
                    reportableInformation,
                    SupervisoryBodyEnum -> MAS,
                    TradeIdentifierTypeEnum -> UniqueTransactionIdentifier
                )
        else valuationDetails -> tradeInformation -> uniqueTradeIdentifier -> assignedIdentifier -> identifier
    then distinct
    then only-element

reporting rule UniqueTransactionIdentifier from ValuationReportInstruction: <"Unique Transaction Identifier (UTI)">
    [regulatoryReference MAS Valuation dataElement "10" field "Unique Transaction Identifier (UTI)"
        provision "Unique identifier to denote the contract."]
    MASUniqueTransactionIdentifier then filter IsMax32UpperCaseAlphanumericText = True
        as "10 Unique Transaction Identifier (UTI)"

reporting rule UniqueTransactionIdentifierProprietary from ValuationReportInstruction: <"Unique Transaction Identifier (UTI)">
    [regulatoryReference MAS Valuation dataElement "10" field "Unique Transaction Identifier (UTI)"
        provision "Unique identifier to denote the contract."]
    MASUniqueTransactionIdentifier then filter IsMax32UpperCaseAlphanumericText = False
        as "10 Unique Transaction Identifier (Proprietary)"

reporting rule ReportingTimestamp from ValuationReportInstruction: <"Reporting Timestamp">
    [regulatoryReference MAS Valuation dataElement "50" field "Reporting timestamp"
        provision "Date and time when the contract was reported to the trade repository."]
    Now
        as "50 Reporting Timestamp"

reporting rule ValuationAmount from ValuationReportInstruction: <"Valuation amount">
    [regulatoryReference MAS Valuation dataElement "53" field "Valuation amount"
        provision "Current monetary value of the outstanding contract."]
    extract valuationDetails -> valuation -> amount -> value
    then FormatToShortFraction5DecimalNumber
        as "53 Valuation amount"

reporting rule ValuationCurrency from ValuationReportInstruction: <"Valuation currency">
    [regulatoryReference MAS Valuation dataElement "54" field "Valuation currency"
        provision "Currency in which Valuation amount is denominated."]
    extract valuationDetails -> valuation -> amount -> unit -> currency
    then extract ConvertNonISOToISOCurrency
        as "54 Valuation currency"

reporting rule ValuationMethod from ValuationReportInstruction: <"Valuation method">
    [regulatoryReference MAS Valuation dataElement "55" field "Valuation method"
        provision "Source and method used for the valuation of the contract by the Reporting specified person."]
    extract valuationDetails -> valuation
    then extract cde.valuation.ValuationMethod to-enum ValuationType1Code
        as "55 Valuation method"

reporting rule ValuationTimestamp from ValuationReportInstruction: <"Valuation Timestamp">
    [regulatoryReference MAS Valuation dataElement "56" field "Valuation timestamp"
        provision "Date and time of the last valuation, whether by 'mark-to-market', 'mark-to-model' or provided by the central counterparty, as the case may be."]
    extract valuationDetails -> valuation -> timestamp
        as "56 Valuation Timestamp"

reporting rule ActionType from ValuationReportInstruction: <"Action type">
    [regulatoryReference MAS Valuation dataElement "133" field "Action type"
        provision "Type of action taken on the contract."]
    extract
        if valuationDetails -> tradeInformation -> action = ActionTypeEnum -> VALU
        then valuationDetails -> tradeInformation -> action to-string
        as "133 Action type"

reporting rule TechnicalRecordId from ValuationReportInstruction: <"Technical Record Id (ISO)">
    [regulatoryReference MAS Valuation dataElement "[Internal]" field "Technical Record Id (ISO)"
        provision "Unique technical identification of the original data for which the status is provided for the BDR."]
    extract reportableInformation -> partyInformation -> regimeInformation
    then filter
        reportingRole = ReportingRoleEnum -> ReportingParty
            and regimeName = RegimeNameEnum -> MAS
    then extract technicalRecordId
    then distinct only-element
        as "[Internal] Technical Record Id (ISO)"

reporting rule ExecutionAgentOfCounterparty1DTCC from ValuationReportInstruction: <"Execution agent of Counterparty 1 (DTCC)">
    [regulatoryReference MAS Valuation dataElement "[Not in regulation]" field "Execution agent of Counterparty 1"
        provision "LEI of the entity that entered into the Reportable Transaction as agent for the Reporting Entity without becoming a counterparty themselves."]
    extract reportableEvent [
        reportableEvent -> reportableInformation -> partyInformation
            then extract
                if (filter
                    partyReference = reportableEvent -> reportingSide -> reportingParty
                then extract
                    ExtractPartyFromRelatedPartyByRole(
                            relatedParty,
                            PartyRoleEnum -> ExecutionAgent
                        )
                        exists)
                then (filter
                    partyReference = reportableEvent -> reportingSide -> reportingParty
                then extract
                    ExtractPartyFromRelatedPartyByRole(
                            relatedParty,
                            PartyRoleEnum -> ExecutionAgent
                        )
                then extract PartyLei(partyId))
                else if (filter
                    partyReference = reportableEvent -> reportingSide -> reportingCounterparty
                then extract
                    ExtractPartyFromRelatedPartyByRole(
                            relatedParty,
                            PartyRoleEnum -> ExecutionAgent
                        )
                        exists)
                then "NOAP"
            then first
    ]
        as "[Not in regulation] Execution agent of Counterparty 1 (DTCC)"

reporting rule ExecutionAgentOfCounterparty2DTCC from ValuationReportInstruction: <"Execution agent of Counterparty 2 (DTCC)">
    [regulatoryReference MAS Valuation dataElement "[Not in regulation]" field "Execution agent of Counterparty 2"
        provision "The Execution agent of the Counterparty 2."]
    extract reportableEvent [
        reportableEvent -> reportableInformation -> partyInformation
            filter partyReference = reportableEvent -> reportingSide -> reportingCounterparty
            then distinct only-element
            then extract
                ExtractPartyFromRelatedPartyByRole(
                        relatedParty,
                        PartyRoleEnum -> ExecutionAgent
                    )
            then extract PartyLei(partyId)
    ]
        as "[Not in regulation] Execution agent of Counterparty 2 (DTCC)"
