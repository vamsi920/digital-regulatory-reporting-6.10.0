namespace drr.projection.iso20022.fca.ukemir.refit.margin
version "${project.version}"

import drr.regulation.common.*
import drr.regulation.fca.ukemir.refit.margin.*

import iso20022.auth108.fca.*

func Project_FcaUkEmirMarginReportToIso20022:
    [projection XML]
    inputs:
        marginReport FCAUKEMIRMarginReport (1..1)
    output:
        iso20022Report Document (1..1)

    set iso20022Report -> derivsTradMrgnDataRpt -> tradData -> rpt:
        TradeReport31Choice__1 {
            mrgnUpd: if marginReport -> collateral -> actionType = MarginActionEnum -> MARU
                then Create_MarginUpdateData(
                        marginReport -> partiesToTheDerivative,
                        marginReport -> collateral
                    ),
            crrctn: if marginReport -> collateral -> actionType = MarginActionEnum -> CORR
                then Create_MarginCorrectionData(
                        marginReport -> partiesToTheDerivative,
                        marginReport -> collateral
                    )
        }

func Create_MarginUpdateData:
    inputs:
        partiesToTheDerivative PartiesToTheDerivative (1..1)
        collateralReport CollateralReport (1..1)
    output:
        details MarginReportData7__1 (1..1)

    set details:
        MarginReportData7__1 {
            rptgTmStmp: partiesToTheDerivative -> reportingTimestamp,
            txId: UniqueTransactionIdentifier2Choice__1 {
                unqTxIdr: if IsMax32UpperCaseAlphanumericText(collateralReport -> uti)
                    then collateralReport -> uti,
                prtry: if IsMax32UpperCaseAlphanumericText(collateralReport -> uti) = False
                    then GenericIdentification175__2 {
                        id: collateralReport -> uti
            }},
            ctrPtyId: Create_CounterpartySpecificData(
                    partiesToTheDerivative,
                    collateralReport
                ),
            coll: MarginCollateralReport4__1 {
                collstnCtgy: collateralReport -> collateralisationCategory to-enum CollateralisationType3Code__1,
                collPrtflCd: CollateralPortfolioCode5Choice__1 {
                    prtfl: PortfolioCode3Choice {
                        cd: if collateralReport -> collateralPortfolioIndicator = True
                            then collateralReport -> collateralPortfolioCode,
                        noPrtfl: if collateralReport -> collateralPortfolioIndicator = False
                            then NotApplicable1Code -> NOAP
                }},
                tmStmp: collateralReport -> collateralTimestamp
            },
            pstdMrgnOrColl: Create_PostedMarginReport(collateralReport),
            rcvdMrgnOrColl: Create_ReceivedMarginReport(collateralReport),
            evtDt: collateralReport -> eventDate
        }

func Create_MarginCorrectionData:
    inputs:
        partiesToTheDerivative PartiesToTheDerivative (1..1)
        collateralReport CollateralReport (1..1)
    output:
        details MarginReportData7__2 (1..1)

    set details:
        MarginReportData7__2 {
            rptgTmStmp: partiesToTheDerivative -> reportingTimestamp,
            txId: UniqueTransactionIdentifier2Choice__2 {
                unqTxIdr: if IsMax32UpperCaseAlphanumericText(collateralReport -> uti)
                    then collateralReport -> uti,
                prtry: if IsMax32UpperCaseAlphanumericText(collateralReport -> uti) = False
                    then GenericIdentification175__1 {
                        id: collateralReport -> uti
            }},
            ctrPtyId: Create_CounterpartySpecificData_2(
                    partiesToTheDerivative,
                    collateralReport
                ),
            coll: MarginCollateralReport4__1 {
                collstnCtgy: collateralReport -> collateralisationCategory to-enum CollateralisationType3Code__1,
                collPrtflCd: CollateralPortfolioCode5Choice__1 {
                    prtfl: PortfolioCode3Choice {
                        cd: if collateralReport -> collateralPortfolioCode exists
                            then collateralReport -> collateralPortfolioCode,
                        noPrtfl: if collateralReport -> collateralPortfolioCode is absent
                            then NotApplicable1Code -> NOAP
                }},
                tmStmp: collateralReport -> collateralTimestamp
            },
            pstdMrgnOrColl: Create_PostedMarginReport(collateralReport),
            rcvdMrgnOrColl: Create_ReceivedMarginReport(collateralReport),
            evtDt: collateralReport -> eventDate
        }

func Create_CounterpartySpecificData:
    inputs:
        partiesToTheDerivative PartiesToTheDerivative (1..1)
        collateralReport CollateralReport (1..1)
    output:
        ctrPtySpcfcData TradeCounterpartyReport20__1 (1..1)

    set ctrPtySpcfcData:
        TradeCounterpartyReport20__1 {
            rptgCtrPty: Counterparty45__1 {
                id: PartyIdentification248Choice__1 {
                    lgl: LegalPersonIdentification1__1 {
                        id: OrganisationIdentification15Choice__1 {
                            lei: partiesToTheDerivative -> counterparty1
            }}}},
            submitgAgt: OrganisationIdentification15Choice__1 {
                lei: partiesToTheDerivative -> reportSubmittingEntityID
            },
            othrCtrPty: Counterparty46__1 {
                idTp: PartyIdentification248Choice__2 {
                    lgl: if partiesToTheDerivative -> counterparty2IdentifierType = True
                        then LegalPersonIdentification1__1 {
                            id: OrganisationIdentification15Choice__1 {
                                lei: partiesToTheDerivative -> counterparty2
                    }},
                    ntrl: if partiesToTheDerivative -> counterparty2IdentifierType = False
                        then NaturalPersonIdentification3__1 {
                            id: NaturalPersonIdentification2__1 {
                                id: GenericIdentification175__1 {
                                    id: partiesToTheDerivative -> counterparty2
            }}}}},
            nttyRspnsblForRpt: OrganisationIdentification15Choice__1 {
                lei: partiesToTheDerivative -> entityResponsibleForReporting
        }}

func Create_CounterpartySpecificData_2:
    inputs:
        partiesToTheDerivative PartiesToTheDerivative (1..1)
        collateralReport CollateralReport (1..1)
    output:
        ctrPtySpcfcData TradeCounterpartyReport20__2 (1..1)

    set ctrPtySpcfcData:
        TradeCounterpartyReport20__2 {
            rptgCtrPty: Counterparty45__1 {
                id: PartyIdentification248Choice__1 {
                    lgl: LegalPersonIdentification1__1 {
                        id: OrganisationIdentification15Choice__1 {
                            lei: partiesToTheDerivative -> counterparty1
            }}}},
            submitgAgt: OrganisationIdentification15Choice__1 {
                lei: partiesToTheDerivative -> reportSubmittingEntityID
            },
            othrCtrPty: Counterparty46__2 {
                idTp: PartyIdentification248Choice__2 {
                    lgl: if partiesToTheDerivative -> counterparty2IdentifierType = True
                        then LegalPersonIdentification1__1 {
                            id: OrganisationIdentification15Choice__1 {
                                lei: partiesToTheDerivative -> counterparty2
                    }},
                    ntrl: if partiesToTheDerivative -> counterparty2IdentifierType = False
                        then NaturalPersonIdentification3__1 {
                            id: NaturalPersonIdentification2__1 {
                                id: GenericIdentification175__1 {
                                    id: partiesToTheDerivative -> counterparty2
            }}}}},
            nttyRspnsblForRpt: OrganisationIdentification15Choice__1 {
                lei: partiesToTheDerivative -> entityResponsibleForReporting
        }}

func Create_PostedMarginReport:
    inputs:
        collateralReport CollateralReport (1..1)
    output:
        postMarginData PostedMarginOrCollateral6__1 (1..1)

    set postMarginData:
        PostedMarginOrCollateral6__1 {
            initlMrgnPstdPreHrcut: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                value: collateralReport -> initialMarginPostedByTheCounterparty1PreHaircut,
                ccy: collateralReport -> initialMarginPostedByCounterparty1Currency to-string
            },
            initlMrgnPstdPstHrcut: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                value: collateralReport -> initialMarginPostedByTheCounterparty1PostHaircut,
                ccy: collateralReport -> initialMarginPostedByCounterparty1Currency to-string
            },
            vartnMrgnPstdPreHrcut: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                value: collateralReport -> variationMarginPostedByTheCounterparty1PreHaircut,
                ccy: collateralReport -> variationMarginPostedByCounterparty1Currency to-string
            },
            vartnMrgnPstdPstHrcut: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                value: collateralReport -> variationMarginPostedByTheCounterparty1PostHaircut,
                ccy: collateralReport -> variationMarginPostedByCounterparty1Currency to-string
            },
            xcssCollPstd: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                value: collateralReport -> excessCollateralPostedByTheCounterparty1,
                ccy: collateralReport -> currencyOfTheExcessCollateralPosted to-string
        }}

func Create_ReceivedMarginReport:
    inputs:
        collateralReport CollateralReport (1..1)
    output:
        rcvdMarginData ReceivedMarginOrCollateral6__1 (1..1)

    set rcvdMarginData:
        ReceivedMarginOrCollateral6__1 {
            initlMrgnRcvdPreHrcut: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                value: collateralReport -> initialMarginCollectedByCounterparty1PreHaircut,
                ccy: collateralReport -> initialMarginCollectedByCounterparty1Currency to-string
            },
            initlMrgnRcvdPstHrcut: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                value: collateralReport -> initialMarginCollectedByCounterparty1PostHaircut,
                ccy: collateralReport -> initialMarginCollectedByCounterparty1Currency to-string
            },
            vartnMrgnRcvdPreHrcut: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                value: collateralReport -> variationMarginCollectedByTheCounterparty1PreHaircut,
                ccy: collateralReport -> variationMarginCollectedByCounterparty1Currency to-string
            },
            vartnMrgnRcvdPstHrcut: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                value: collateralReport -> variationMarginCollectedByTheCounterparty1PostHaircut,
                ccy: collateralReport -> variationMarginCollectedByCounterparty1Currency to-string
            },
            xcssCollRcvd: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                value: collateralReport -> excessCollateralCollectedByTheCounterparty1,
                ccy: collateralReport -> currencyOfTheExcessCollateralCollected to-string
        }}
