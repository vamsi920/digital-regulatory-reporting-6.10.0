namespace drr.standards.iosco.cde.version1.price
version "${project.version}"

import cdm.base.*
import cdm.base.math.*
import cdm.observable.asset.*
import cdm.product.asset.*

import drr.regulation.common.*
import drr.standards.iosco.*
import drr.standards.iosco.cde.base.price.*
import drr.standards.iosco.cde.version1.* as cdeV1

reporting rule PriceNoFormat from TransactionReportInstruction: <"Price">
    if IsFixedFloatZeroCouponSwapKnownAmount(ProductForEvent)
    then (PriceOfZeroCouponSwaps
        then extract value
        then only-element)
    else PriceOfEvent

reporting rule Price from TransactionReportInstruction: <"Price">
    [regulatoryReference CPMI_IOSCO cdeV1.CDE section "2" dataElement "50" field "Price"
        provision "Price specified in the OTC derivative transaction. It does not include fees, taxes or commissions.
        For commodity fixed/float swaps and similar products with periodic payments, this data element refers to the fixed price of the fixed leg(s).
        For commodity and equity forwards and similar products, this data element refers to the forward price of the underlying or reference asset.
        For equity swaps, portfolios swaps, and similar products, this data element refers to the initial price of the underlying or reference asset.
        For contracts for difference and similar products, this data element refers to the initial price of the underlier.
        This data element is not applicable to:
            - Interest rate swaps and forward rate agreements, as it is understood that the information included in the data elements Fixed rate and Spread may be interpreted as the price of the transaction.
            - Interest rate options and interest rate swaptions, as it is understood that the information included in the data elements Strike price and Option premium may be interpreted as the price of the transaction.
            - Commodity basis swaps and the floating leg of commodity fixed/float swaps, as it is understood that the information included in the data element Spread may be interpreted as the price of the transaction.
            - Foreign exchange swaps, forwards and options, as it is understood that the information included in the data elements Exchange rate, Strike price, and Option premium may be interpreted as the price of the transaction.
            - Equity options, as it is understood that the information included in the data elements Strike price and Option premium may be interpreted as the price of the transaction.
            - Credit default swaps and credit total return swaps, as it is understood that the information included in the data elements Fixed rate, Spread and Upfront payment (Other payment type: Upfront payment) may be interpreted as the price of the transaction.
            - Commodity options, as it is understood that the information included in the data elements Strike price and Option premium may be interpreted as the price of the transaction. Where the price is not known when a new transaction is reported, the price is updated as it becomes available.
        For transactions that are part of a package, this data element contains the price of the component transaction where applicable."]
    [regulatoryReference ISDA ISDAWorkingGroup date "20221117"
        provision "For Zero Coupon Swaps with a Known Amount, the Known Amount is reported as a Price. The Known Amount is not the notional, as it includes a rolled up interest component by definition."]
    [regulatoryReference CPMI_IOSCO cdeV1.CDE section "2" dataElement "50" field "Price"
        provision "Price specified in the OTC derivative transaction. It does not include fees, taxes or commissions.
        For commodity fixed/float swaps and similar products with periodic payments, this data element refers to the fixed price of the fixed leg(s).
        For commodity and equity forwards and similar products, this data element refers to the forward price of the underlying or reference asset.
        For equity swaps, portfolios swaps, and similar products, this data element refers to the initial price of the underlying or reference asset.
        For contracts for difference and similar products, this data element refers to the initial price of the underlier.
        This data element is not applicable to:
            - Interest rate swaps and forward rate agreements, as it is understood that the information included in the data elements Fixed rate and Spread may be interpreted as the price of the transaction.
            - Interest rate options and interest rate swaptions, as it is understood that the information included in the data elements Strike price and Option premium may be interpreted as the price of the transaction.
            - Commodity basis swaps, as it is understood that the information included in the data element Spread may be interpreted as the price of the transaction.
            - Foreign exchange swaps, forwards and options, as it is understood that the information included in the data elements Exchange rate, Strike price, and Option premium may be interpreted as the price of the transaction.
            - Equity options, as it is understood that the information included in the data elements Strike price and Option premium may be interpreted as the price of the transaction.
            - Credit default swaps and credit total return swaps, as it is understood that the information included in the data elements Fixed rate, Spread and Upfront payment (Other payment type: Upfront payment) may be interpreted as the price of the transaction.
            - Commodity options, as it is understood that the information included in the data elements Strike price and Option premium may be interpreted as the price of the transaction. Where the price is not known when a new transaction is reported, the price is updated as it becomes available.
        For transactions that are part of a package, this data element contains the price of the component transaction where applicable."]
    // IR Zero Coupon Swaps
    PriceFormatFromNotation(PriceNoFormat, PriceNotation)

reporting rule PriceCurrency from TransactionReportInstruction: <"Price Currency">
    [regulatoryReference CPMI_IOSCO cdeV1.CDE section "2" field "51"
        provision "Currency in which the price is denominated. Price currency is only applicable if Price notation = 1."]
    [regulatoryReference ISDA ISDAWorkingGroup date "20221117"
        provision "For Zero Coupon Swaps with a Known Amount, the Known Amount is reported as a Price. The Known Amount is not the notional, as it includes a rolled up interest component by definition."]
    // IR Zero Coupon Swaps
    filter PriceNotation = Monetary
    then (if IsFixedFloatZeroCouponSwapKnownAmount(ProductForEvent)
        then (PriceOfZeroCouponSwaps then extract unit -> currency)
        else Contract_Price_Monetary extract unit -> currency)
    then only-element
    then extract ConvertNonISOToISOCurrency

reporting rule PriceNotation from ReportableEvent: <"CDE Price Notation Enum">
    [regulatoryReference CPMI_IOSCO cdeV1.CDE section "2" field "52"
        provision "Manner in which the price is expressed."]
    [regulatoryReference ISDA ISDAWorkingGroup date "20221117"
        provision "For Zero Coupon Swaps with a Known Amount, the Known Amount is reported as a Price. The Known Amount is not the notional, as it includes a rolled up interest component by definition."]
    // IR Zero Coupon Swaps
    if IsFixedFloatZeroCouponSwapKnownAmount(ProductForEvent)
    then (PriceOfZeroCouponSwaps
        then if unit -> currency exists
            then PriceNotationEnum -> Monetary
            else PriceNotationEnum -> Decimal)
    else (Contract_Price_Monetary only-element extract GetPriceNotation)

reporting rule PriceNotationString from TransactionReportInstruction: <"Price Notation">
    [regulatoryReference CPMI_IOSCO cdeV1.CDE section "2" field "52"
        provision "Manner in which the price is expressed."]
    GetNotationString(PriceNotation)

reporting rule PriceUnitOfMeasure from TransactionReportInstruction: <"Price Unit Of Measure">
    [regulatoryReference CPMI_IOSCO cdeV1.CDE section "2" field "53"
        provision "Unit of measure in which the price is expressed."]
    extract Contract_Price_Monetary
    then only-element
    then extract
        if perUnitOf -> capacityUnit exists
        then CapacityUnitToISO20022UnitOfMeasure(perUnitOf -> capacityUnit)
        else if perUnitOf -> weatherUnit exists
        then WeatherUnitToISO20022UnitOfMeasure(perUnitOf -> weatherUnit)
        else if perUnitOf -> financialUnit exists
        then FinancialUnitToISO20022UnitOfMeasure(perUnitOf -> financialUnit)
        else if priceType = PriceTypeEnum -> InterestRate
        then empty

reporting rule PriceSchedule from TransactionReportInstruction: <"Price Schedule">
    [regulatoryReference CPMI_IOSCO cdeV1.CDE section "2" field "54.1"
        provision "Unadjusted effective date of the price"]
    [regulatoryReference CPMI_IOSCO cdeV1.CDE section "2" field "54.2"
        provision "Unadjusted end date of the price (not applicable if the unadjusted end date of a given schedules period is back-to-back with the unadjusted effective date of the subsequent period)"]
    [regulatoryReference CPMI_IOSCO cdeV1.CDE section "2" field "54.3"
        provision "Price in effect between the unadjusted effective date and unadjusted end date inclusive.
        Price schedule is only applicable if the price varies per schedule.
        The currency, notation, and unit of measure for the varying prices in the schedule are reported in Price
        currency, Price notation, and Price unit of measure data elements."]
    extract GetReportablePricePeriod(item, PriceNotation)

reporting rule InterestRateFixedRate from InterestRatePayout: <"Fixed Rate for Interest Rates">
    [regulatoryReference CPMI_IOSCO cdeV1.CDE section "2" field "55"
        provision "For each leg of the transaction, where applicable: for OTC derivative transactions with periodic payments, per annum rate of the fixed leg(s)."]
    rateSpecification -> fixedRate -> rateSchedule -> price -> value
        then FormatToBaseOneRate

reporting rule SpreadLeg1 from TransactionReportInstruction: <"Spread of Leg 1">
    [regulatoryReference CPMI_IOSCO cdeV1.CDE section "2" field "57a"
        provision "For each leg of the transaction, where applicable: for OTC derivative transactions with periodic payments (eg interest rate fixed/float swaps, interest rate basis swaps         commodity swaps), spread on the individual floating leg(s) index reference price, in the case where there is a spread on a floating leg(s).
    For example, USD-LIBOR-BBA plus .03 or WTI minus USD 14.65;
    or
    difference between the reference prices of the two floating leg indexes. For example, the 9.00 USD Spread for a WCS vs. WTI basis swap where WCS is priced at 43 USD and WTI is priced at 52 US
    "]
    TradeForEvent
        then extract ProductForTrade
        then extract
            if IsCommoditySwapFloatFloat
            then CommodityLeg1 -> commodityPriceReturnTerms -> spread
            else if IsSingleCommodityPayoutProduct
            then EconomicTermsForProduct -> payout -> commodityPayout only-element -> commodityPriceReturnTerms -> spread
            else if IsCommodityFloatingPriceForward
            then EconomicTermsForProduct -> payout -> commodityPayout only-element -> commodityPriceReturnTerms -> spread
            else if IsIRSwaption or IsCreditSwaption
            then InterestRateLeg1(UnderlierForProduct) -> rateSpecification -> floatingRate -> spreadSchedule
            else InterestRateLeg1 -> rateSpecification -> floatingRate -> spreadSchedule
        then extract price

reporting rule SpreadLeg1NotationEnum from TransactionReportInstruction: <"Spread of Leg 1 Notation Enum">
    SpreadLeg1 then extract if value exists then GetPriceNotation

reporting rule SpreadLeg1Notation from TransactionReportInstruction: <"Spread of Leg 1 Notation">
    [regulatoryReference CPMI_IOSCO cdeV1.CDE section "2" field "59a"
        provision "For each leg of the transaction, where applicable: manner in which the spread is expressed."]
    SpreadLeg1NotationEnum then GetNotationString

reporting rule SpreadLeg1Currency from TransactionReportInstruction: <"Spread of Leg 1 Currency">
    [regulatoryReference CPMI_IOSCO cdeV1.CDE section "2" field "58a"
        provision "For each leg of the transaction, where applicable: currency in which the spread is denominated.
                    This data element is only applicable if Spread notation = 1."]
    SpreadLeg1
        then extract
            if GetPriceNotation = PriceNotationEnum -> Monetary
            then unit -> currency
        then extract ConvertNonISOToISOCurrency

reporting rule SpreadLeg2 from TransactionReportInstruction: <"Spread of Leg 2">
    [regulatoryReference CPMI_IOSCO cdeV1.CDE section "2" field "57b"
        provision "For each leg of the transaction, where applicable: for OTC derivative transactions with periodic payments (eg interest rate fixed/float swaps, interest rate basis swaps commodity swaps), spread on the individual floating leg(s) index reference price, in the case where there is a spread on a floating leg(s).
    For example, USD-LIBOR-BBA plus .03 or WTI minus USD 14.65;
    or
    difference between the reference prices of the two floating leg indexes. For example, the 9.00 USD Spread for a WCS vs. WTI basis swap where WCS is priced at 43 USD and WTI is priced at 52 US
    "]
    TradeForEvent
        then extract ProductForTrade
        then extract
            if IsIRSwaption
            then InterestRateLeg2(UnderlierForProduct) -> rateSpecification -> floatingRate -> spreadSchedule
            else if IsCommoditySwap
            then CommodityLeg2 -> commodityPriceReturnTerms -> spread
            else InterestRateLeg2 -> rateSpecification -> floatingRate -> spreadSchedule
        then extract price

reporting rule SpreadLeg2NotationEnum from TransactionReportInstruction: <"Spread of Leg 2 Notation Enum">
    SpreadLeg2 then extract if value exists then GetPriceNotation

reporting rule SpreadLeg2Notation from TransactionReportInstruction: <"Spread of Leg 2 Notation">
    [regulatoryReference CPMI_IOSCO cdeV1.CDE section "2" field "57b"
        provision "For each leg of the transaction, where applicable: manner in which the spread is expressed."]
    GetNotationString(SpreadLeg2NotationEnum)

reporting rule SpreadLeg2Currency from TransactionReportInstruction: <"Spread of Leg 2 Currency">
    [regulatoryReference CPMI_IOSCO cdeV1.CDE section "2" field "58a"
        provision "For each leg of the transaction, where applicable: currency in which the spread is denominated.
                    This data element is only applicable if Spread notation = 1."]
    SpreadLeg2
        then extract
            if GetPriceNotation = PriceNotationEnum -> Monetary
            then unit -> currency
        then extract ConvertNonISOToISOCurrency

reporting rule Spread_InterestRate from InterestRatePayout: <"Spread (from InterestRatePayout)">
    [regulatoryReference CPMI_IOSCO cdeV1.CDE section "2" field "57"
        provision "For each leg of the transaction, where applicable: for OTC derivative transactions with periodic payments (eg interest rate fixed/float swaps, interest rate basis swaps, commodity swaps), spread on the individual floating leg(s) index reference price, in the case where there is a spread on a floating leg(s). For example, USD-LIBOR-BBA plus .03 or WTI minus USD 14.65; or difference between the reference prices of the two floating leg indexes. For example, the 9.00 USD Spread for a WCS vs. WTI basis swap where WCS is priced at 43 USD and WTI is priced at 52 USD."]
    rateSpecification -> floatingRate -> spreadSchedule

reporting rule Spread_Commodity from CommodityPayout: <"Spread (from CommodityPayout)">
    [regulatoryReference CPMI_IOSCO cdeV1.CDE section "2" field "57"
        provision "For each leg of the transaction, where applicable: for OTC derivative transactions with periodic payments (eg interest rate fixed/float swaps, interest rate basis swaps, commodity swaps), spread on the individual floating leg(s) index reference price, in the case where there is a spread on a floating leg(s). For example, USD-LIBOR-BBA plus .03 or WTI minus USD 14.65; or difference between the reference prices of the two floating leg indexes. For example, the 9.00 USD Spread for a WCS vs. WTI basis swap where WCS is priced at 43 USD and WTI is priced at 52 USD."]
    commodityPriceReturnTerms -> spread

reporting rule StrikePriceNoFormat from TransactionReportInstruction: <"Strike Price">
    Contract_StrikePrice -> value only-element

reporting rule StrikePrice from TransactionReportInstruction: <"Strike Price">
    [regulatoryReference CPMI_IOSCO cdeV1.CDE section "2" field "60"
        provision "For options other than FX options, swaptions and similar products, price at which the owner of an option can buy or sell the underlying asset of the option. For foreign exchange options, exchange rate at which the option can be exercised, expressed as the rate of exchange from converting the unit currency into the quoted currency. In the example 0.9426 USD/EUR, USD is the unit currency and EUR is the quoted currency; USD 1 = EUR 0.9426.Where the strike price is not known when a new transaction is reported, the strike price is updated as it becomes available.  For volatility and variance swaps and similar products the volatility strike price is reported in this data element."]
    [regulatoryReference ISDA PeerReviewGroup date "20220615"
        provision "For variance swaps, the volatility strike price can be included as part of the product in CDM. The assumption in DRR is that volatility strike price must be reported for variance swaps."]
    PriceFormatFromNotation(StrikePriceNoFormat, StrikePriceNotationEnum)

reporting rule StrikePriceNotationEnum from TransactionReportInstruction: <"Strike Price Notation">
    [regulatoryReference CPMI_IOSCO cdeV1.CDE section "2" field "62"
        provision "Manner in which the Strike price is expressed."]
    Contract_StrikePrice only-element extract GetPriceNotation

reporting rule StrikePriceNotation from TransactionReportInstruction: <"Price Notation">
    [regulatoryReference CPMI_IOSCO cdeV1.CDE section "2" field "52"
        provision "Manner in which the Strike price is expressed."]
    GetNotationString(StrikePriceNotationEnum)

reporting rule StrikePriceCurrency from TransactionReportInstruction: <"Strike price currency/currency pair">
    [regulatoryReference CPMI_IOSCO cdeV1.CDE section "2" field "61"
        provision "For equity options, commodity options, and similar products, currency in which the strike price is denominated. For foreign exchange options: Currency pair and order in which the strike price is expressed. It is expressed as unit currency/quoted currency. In the example 0.9426 USD/EUR, USD is the unit currency and EUR is the quoted currency, USD 1 = EUR 0.9426 Strike price currency/currency pair is only applicable if Strike price notation = 1."]
    extract Contract_StrikePrice
    then only-element
    then extract
        if IsPriceMonetary
        then (if priceType = PriceTypeEnum -> ExchangeRate
                    and perUnitOf -> currency exists
                    and unit -> currency exists
            then ConvertNonISOToISOCurrency(perUnitOf -> currency) to-string + "/" + ConvertNonISOToISOCurrency(
                        unit -> currency
                    )
                    to-string
            else ConvertNonISOToISOCurrency(unit -> currency) to-string)

reporting rule StrikePriceSchedule from TransactionReportInstruction: <"Strike price schedule">
    [regulatoryReference CPMI_IOSCO cdeV1.CDE section "2" field "63.1"
        provision "Unadjusted effective date of the strike price"]
    [regulatoryReference CPMI_IOSCO cdeV1.CDE section "2" field "63.2"
        provision "Unadjusted end date of the strike price (not applicable if the unadjusted end date of a given schedules period is back-to-back with the unadjusted effective date of the subsequent period)"]
    [regulatoryReference CPMI_IOSCO cdeV1.CDE section "2" field "63.3"
        provision "Strike price in effect between the unadjusted effective date and unadjusted end date inclusive.
        Strike price schedule is only applicable if the strike price varies per schedule.
        The currency for the varying strike prices in the schedule is reported in Strike price currency data element"]
    extract GetReportableStrikePricePeriod(item, StrikePriceNotationEnum)

reporting rule OptionPremiumAmount from TransactionReportInstruction: <"Option Premium Amount">
    [regulatoryReference CPMI_IOSCO cdeV1.CDE section "2" field "64"
        provision "For options and swaptions of all asset classes, monetary amount paid by the option buyer. This data element is not applicable if the instrument is not an option or does not embed any optionality."]
    [regulatoryReference ISDA PeerReviewGroup date "20230717"
        provision "Members agreed to report the premium specific to each event, but for lifecycle events unrelated to a change in premium, the previously reported premium and payment date will be persisted."]
    Get_OptionPremiumOnEventDate -> quantity -> value
        then FormatToShortFraction5DecimalNumber

reporting rule OptionPremiumCurrency from TransactionReportInstruction: <"Option Premium Currency">
    [regulatoryReference CPMI_IOSCO cdeV1.CDE section "2" field "65"
        provision "For options and swaptions of all asset classes, currency in which the option premium amount is denominated. This data element is not applicable if the instrument is not an option or does not embed any optionality."]
    [regulatoryReference ISDA PeerReviewGroup date "20230717"
        provision "Members agreed to report the premium specific to each event, but for lifecycle events unrelated to a change in premium, the previously reported premium and payment date will be persisted."]
    Get_OptionPremiumOnEventDate -> quantity -> unit -> currency
        then extract ConvertNonISOToISOCurrency

reporting rule OptionPremiumPaymentDate from TransactionReportInstruction: <"Option Premium Payment Date">
    [regulatoryReference CPMI_IOSCO cdeV1.CDE section "2" field "66"
        provision "Unadjusted date on which the option premium is paid."]
    [regulatoryReference ISDA PeerReviewGroup date "20220811"
        provision "Model should contain a fall back for unadjustedDate when adjustedDate is only available. If an adjusted date is only provided then fields requiring an unadjusted date are left blank which will result in a NACK from the TR.  Functional rules should be updated to fall back on adjusted date if available."]
    [regulatoryReference ISDA PeerReviewGroup date "20230717"
        provision "Members agreed to report the premium specific to each event, but for lifecycle events unrelated to a change in premium, the previously reported premium and payment date will be persisted."]
    AdjustableOrAdjustedOrRelativeDateResolution(
            Get_OptionPremiumOnEventDate -> settlementDate
        )

reporting rule FirstExerciseDate from TransactionReportInstruction: <"First Exercise Date">
    [regulatoryReference CPMI_IOSCO cdeV1.CDE section "2" field "67"
        provision "First unadjusted date during the exercise period in which an option can be exercised.
			For European-style options, this date is same as the Expiration date. For American-style options,
			the first possible exercise date is the unadjusted date included in the execution timestamp.
			For knock-in options, where the first exercise date is not known when a new transaction is
			reported, the first exercise date is updated as it becomes available.
			This data element is not applicable if the instrument is not an option or does not embed any
			optionality."]
    [regulatoryReference ISDA PeerReviewGroup date "20220811"
        provision "Model should contain a fall back for unadjustedDate when adjustedDate is only available. If an adjusted date is only provided then fields requiring an unadjusted date are left blank which will result in a NACK from the TR.  Functional rules should be updated to fall back on adjusted date if available."]
    extract TradeForEvent
    then extract trade [
        ProductForTrade(trade) -> contractualProduct -> economicTerms -> payout -> optionPayout only-element -> exerciseTerms -> optionStyle
            extract [
                if americanExercise exists
                then if AdjustableDateResolution(
                            americanExercise -> commencementDate -> adjustableDate
                        )
                        exists
                    then AdjustableDateResolution(
                                americanExercise -> commencementDate -> adjustableDate
                            )
                    else trade -> tradeDate
                else if europeanExercise exists
                then if MinAdjustableDateResolution(
                            europeanExercise -> expirationDate -> adjustableDate
                        )
                        exists
                    then MinAdjustableDateResolution(
                                europeanExercise -> expirationDate -> adjustableDate
                            )
                    else AdjustableDateResolution(
                            ProductForTrade(trade) -> contractualProduct -> economicTerms -> terminationDate -> adjustableDate
                        )
                else if bermudaExercise exists
                then AdjustableDatesResolution(
                        bermudaExercise -> bermudaExerciseDates -> adjustableDates
                    )
                    min
            ]
    ]

reporting rule ExchangeRate from TransactionReportInstruction: <"Exchange Rate">
    [regulatoryReference CPMI_IOSCO cdeV1.CDE section "2" field "68"
        provision "Exchange rate between the two different currencies specified in the OTC derivative transaction agreed by the counterparties at the inception of the transaction, expressed as the rate of exchange from converting the unit currency into the quoted currency. In the example 0.9426 USD/EUR, USD is the unit currency and EUR is the quoted currency; USD 1 = EUR 0.9426."]
    [Contract_Price, Contract_StrikePrice]
        filter priceType = PriceTypeEnum -> ExchangeRate and arithmeticOperator is absent
        then last
        then extract value
        then FormatToBaseOne18Rate
        as "2.68 Exchange Rate Price"

reporting rule ExchangeRateBasis from TransactionReportInstruction: <"Exchange Rate Basis">
    [regulatoryReference CPMI_IOSCO cdeV1.CDE section "2" field "69"
        provision "Currency pair and order in which the exchange rate is denominated, expressed as unit currency/quoted currency. In the example 0.9426 USD/EUR, USD is the unit currency and EUR is the quoted currency, USD 1 = EUR 0.9426."]
    [regulatoryReference ISDA ISDAWorkingGroup date "unknown"
        provision "Per cdeV1.CDE definition 0.9426 EUR (CDM unitOfAmount) per 1 USD (CDM perUnitOfAmount) should be expressed as USD/EUR"]
    [Contract_Price, Contract_StrikePrice]
        filter priceType = PriceTypeEnum -> ExchangeRate and arithmeticOperator is absent
        then last
        then if ConvertNonISOToISOCurrency(perUnitOf -> currency) exists
                    and ConvertNonISOToISOCurrency(unit -> currency) exists
            then ConvertNonISOToISOCurrency(perUnitOf -> currency) to-string + "/" + ConvertNonISOToISOCurrency(
                        unit -> currency
                    )
                    to-string
        as "2.69 Exchange Rate Basis"

reporting rule PackageTransactionPriceNoFormat from TransactionReportInstruction: <"Packages Price">
    GetPackageInformation -> price
        then extract if arithmeticOperator is absent then value

reporting rule PackageTransactionPrice from TransactionReportInstruction: <"Package Transaction Price">
    [regulatoryReference CPMI_IOSCO cdeV1.CDE section "2" field "90"
        provision "Traded price of the entire package in which the reported derivative transaction is a component. This data element is not applicable if no package is involved, or package transaction spread is used. Prices and related data elements of the transactions (P Price currency, Price notation, Price unit of measure) that represent individual components of the package are reported when available. The package transaction price may not be known when a new transaction is reported but may be updated later."]
    PriceFormatFromNotation(
            PackageTransactionPriceNoFormat,
            PackageTransactionPriceNotationEnum
        )

reporting rule PackageTransactionPriceCurrency from TransactionReportInstruction: <"Package Transaction Price Currency">
    [regulatoryReference CPMI_IOSCO cdeV1.CDE section "2" field "91"
        provision "Currency in which the Package transaction price is denominated. This data element is not applicable if no package is involved, or Package transaction spread is used, or Package transaction price notation = 2 , or = 3"]
    GetPackageInformation -> price
        then extract
            if arithmeticOperator is absent then unit -> currency
        then extract ConvertNonISOToISOCurrency

reporting rule PackageTransactionPriceNotationEnum from TransactionReportInstruction: <"Package Transaction Price Notation Enum">
    [regulatoryReference CPMI_IOSCO cdeV1.CDE section "2" field "92"
        provision "Manner in which the Package transaction price is expressed. This data element is not applicable if no package is involved, or Package transaction spread is used"]
    GetPackageInformation -> price
        then extract
            if arithmeticOperator is absent then GetPriceNotation

reporting rule PackageTransactionPriceNotation from TransactionReportInstruction: <"Package Transaction Price Notation">
    [regulatoryReference CPMI_IOSCO cdeV1.CDE section "2" field "92"
        provision "Manner in which the Package transaction price is expressed. This data element is not applicable if no package is involved, or Package transaction spread is used"]
    PackageTransactionPriceNotationEnum then GetNotationString

reporting rule PackageTransactionSpreadNoFormat from TransactionReportInstruction: <"Package Transaction Spread">
    GetPackageInformation -> price
        then extract
            if arithmeticOperator = ArithmeticOperationEnum -> Add
            then value

reporting rule PackageTransactionSpread from TransactionReportInstruction: <"Packages Spread">
    [regulatoryReference CPMI_IOSCO cdeV1.CDE section "2" field "93"
        provision "Traded price of the entire package in which the reported derivative transaction is a component of a package transaction. Package transaction price when the price of the package is expressed as a spread, difference between two reference prices. This data element is not applicable if no package is involved, or Package transaction price is used. Spread and related data elements of the transactions (spread currency, Spread notation) that represent individual components of the package are reported when available. Package transaction spread may not be known when a new transaction is reported but may be updated later."]
    PriceFormatFromNotation(
            PackageTransactionSpreadNoFormat,
            PackageTransactionSpreadNotationEnum
        )

reporting rule PackageTransactionSpreadCurrency from TransactionReportInstruction: <"Package Transaction Spread Currency">
    [regulatoryReference CPMI_IOSCO cdeV1.CDE section "2" field "94"
        provision "Currency in which the Package transaction spread is denominated. This data element is not applicable if no package is involved, or Package transaction price is used, or Package transaction spread notation = 2, or = 3 or = 4"]
    if PackageTransactionSpreadNotationEnum <> PriceNotationEnum -> Basis
    then (GetPackageInformation -> price
        then extract
            if arithmeticOperator = ArithmeticOperationEnum -> Add
            then unit -> currency)
        then extract ConvertNonISOToISOCurrency

reporting rule PackageTransactionSpreadNotationEnum from TransactionReportInstruction: <"Package Transaction Price Notation Enum">
    [regulatoryReference CPMI_IOSCO cdeV1.CDE section "2" field "95"
        provision "Manner in which the Package transaction price is expressed. This data element is not applicable if no package is involved, or Package transaction spread is used"]
    GetPackageInformation -> price
        then extract
            if arithmeticOperator = ArithmeticOperationEnum -> Add
            then GetPriceNotation

reporting rule PackageTransactionSpreadNotation from TransactionReportInstruction: <"Package Transaction Price Notation">
    [regulatoryReference CPMI_IOSCO cdeV1.CDE section "2" field "95"
        provision "Manner in which the Package transaction price is expressed. This data element is not applicable if no package is involved, or Package transaction spread is used"]
    PackageTransactionSpreadNotationEnum then GetNotationString
