namespace drr.projection.iso20022.esma.emir.refit.trade
version "${project.version}"

import drr.regulation.common.*
import drr.regulation.common.util.*
import drr.regulation.esma.emir.refit.trade.*
import drr.standards.iosco.cde.base.price.*
import drr.standards.iso.* as iso

import iso20022.auth030.esma.*

func Project_EsmaEmirTradeReportToIso20022:
    [projection XML]
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        iso20022Report Document (1..1)

    set iso20022Report -> derivsTradRpt -> rptHdr: Create_TradeReportHeader

    set iso20022Report -> derivsTradRpt -> tradData -> rpt:
        Create_TradeReport32Choice__1(drrReport)

func Create_TradeReportHeader:
    output:
        rptHdr TradeReportHeader4__1 (1..1)

    set rptHdr:
        TradeReportHeader4__1 {
            nbRcrds: 1
        }

func Create_TradeReport32Choice__1:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        rpt TradeReport32Choice__1 (1..1)

    alias actionType: drrReport -> actionType
    alias lvl: drrReport -> level

    set rpt:
        TradeReport32Choice__1 {
            new: if actionType = NEWT
                then TradeData42__1 {
                    ctrPtySpcfcData: Create_CounterpartySpecificData36__1(drrReport),
                    cmonTradData: Create_CommonTradeDataReport69__1(drrReport),
                    lvl: lvl to-enum ModificationLevel1Code
                },
            mod: if actionType = MODI
                then TradeData42__2 {
                    ctrPtySpcfcData: Create_CounterpartySpecificData36__2(drrReport),
                    cmonTradData: Create_CommonTradeDataReport69__2(drrReport),
                    lvl: lvl to-enum ModificationLevel1Code
                },
            crrctn: if actionType = CORR
                then TradeData42__3 {
                    ctrPtySpcfcData: Create_CounterpartySpecificData36__1(drrReport),
                    cmonTradData: Create_CommonTradeDataReport69__3(drrReport),
                    lvl: lvl to-enum ModificationLevel1Code
                },
            termntn: if actionType = TERM
                then TradeData42__4 {
                    ctrPtySpcfcData: Create_CounterpartySpecificData36__3(drrReport),
                    cmonTradData: Create_CommonTradeDataReport69__4(drrReport),
                    lvl: lvl to-enum ModificationLevel1Code
                },
            posCmpnt: if actionType = POSC
                then TradeData42__5 {
                    ctrPtySpcfcData: Create_CounterpartySpecificData36__1(drrReport),
                    cmonTradData: Create_CommonTradeDataReport69__5(drrReport),
                    lvl: lvl to-enum ModificationLevel1Code__1
                },
            valtnUpd: if actionType = VALU
                then TradeData42__6 {
                    ctrPtySpcfcData: Create_CounterpartySpecificData36__4(drrReport),
                    cmonTradData: Create_CommonTradeDataReport69__6(drrReport),
                    lvl: lvl to-enum ModificationLevel1Code
                },
            err: if actionType = EROR
                then TradeData42__7 {
                    ctrPtySpcfcData: Create_CounterpartySpecificData36__3(drrReport),
                    cmonTradData: Create_CommonTradeDataReport69__6(drrReport),
                    lvl: lvl to-enum ModificationLevel1Code
                },
            rvv: if actionType = REVI
                then TradeData42__3 {
                    ctrPtySpcfcData: Create_CounterpartySpecificData36__1(drrReport),
                    cmonTradData: Create_CommonTradeDataReport69__3(drrReport),
                    lvl: lvl to-enum ModificationLevel1Code
        }}

// CounterpartySpecificData36
func Create_CounterpartySpecificData36__1:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        ctrPtySpcfcData CounterpartySpecificData36__1 (1..1)

    set ctrPtySpcfcData:
        CounterpartySpecificData36__1 {
            ctrPty: Create_TradeCounterpartyReport20__1(drrReport),
            valtn: ContractValuationData8__1 {
                ctrctVal: AmountAndDirection109__1 {
                    amt: ActiveOrHistoricCurrencyAnd5DecimalAmount__1 {
                        value: drrReport -> valuationAmount,
                        ccy: drrReport -> valuationCurrency to-string
                    },
                    ...
                },
                tmStmp: drrReport -> valuationTimestamp,
                tp: drrReport -> valuationMethod to-enum ValuationType1Code,
                ...
            },
            rptgTmStmp: drrReport -> reportingTimestamp
        }

func Create_CounterpartySpecificData36__2:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        ctrPtySpcfcData CounterpartySpecificData36__2 (1..1)

    set ctrPtySpcfcData:
        CounterpartySpecificData36__2 {
            ctrPty: Create_TradeCounterpartyReport20__1(drrReport),
            rptgTmStmp: drrReport -> reportingTimestamp
        }

func Create_CounterpartySpecificData36__3:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        ctrPtySpcfcData CounterpartySpecificData36__3 (1..1)

    set ctrPtySpcfcData:
        CounterpartySpecificData36__3 {
            ctrPty: Create_TradeCounterpartyReport20__2(drrReport),
            rptgTmStmp: drrReport -> reportingTimestamp
        }

func Create_CounterpartySpecificData36__4:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        ctrPtySpcfcData CounterpartySpecificData36__4 (1..1)

    set ctrPtySpcfcData:
        CounterpartySpecificData36__4 {
            ctrPty: Create_TradeCounterpartyReport20__2(drrReport),
            valtn: ContractValuationData8__2 {
                ctrctVal: AmountAndDirection109__2 {
                    amt: ActiveOrHistoricCurrencyAnd5DecimalAmount__1 {
                        value: drrReport -> valuationAmount,
                        ccy: drrReport -> valuationCurrency to-string
                    },
                    ...
                },
                tmStmp: drrReport -> valuationTimestamp,
                tp: drrReport -> valuationMethod to-enum ValuationType1Code,
                ...
            },
            rptgTmStmp: drrReport -> reportingTimestamp
        }

// TradeCounterpartyReport20
func Create_TradeCounterpartyReport20__1:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        ctrPty TradeCounterpartyReport20__1 (1..1)

    set ctrPty:
        TradeCounterpartyReport20__1 {
            rptgCtrPty: Counterparty45__1 {
                id: Create_PartyIdentification248Choice__1(drrReport -> counterparty1),
                ntr: CounterpartyTradeNature15Choice__1 {
                    fi: if drrReport -> natureOfCounterparty1 = F
                        then Create_FinancialInstitutionSector1__1(
                                drrReport -> corporateSectorOfTheCounterparty1,
                                drrReport -> clearingThresholdOfCounterparty1
                            ),
                    nfi: if drrReport -> natureOfCounterparty1 = N
                        then Create_NonFinancialInstitutionSector10__1(
                                drrReport -> corporateSectorOfTheCounterparty1,
                                drrReport -> clearingThresholdOfCounterparty1,
                                drrReport -> directlyLinkedToCommercialActivityOrTreasuryFinancing
                            ),
                    cntrlCntrPty: if drrReport -> natureOfCounterparty1 = C
                        then NoReasonCode -> NORE,
                    othr: if drrReport -> natureOfCounterparty1 = C
                        then NoReasonCode -> NORE
                },
                drctnOrSd: Direction4Choice__1 {
                    ctrPtySd: drrReport -> direction1 to-enum OptionParty1Code,
                    drctn: Direction2__1 {
                        drctnOfTheFrstLeg: drrReport -> leg1 -> direction2 to-enum OptionParty3Code,
                        drctnOfTheScndLeg: drrReport -> leg2 -> direction2 to-enum OptionParty3Code
            }},},
            othrCtrPty: Counterparty46__1 {
                idTp: Create_PartyIdentification248Choice__2(drrReport),
                ntr: CounterpartyTradeNature15Choice__2 {
                    fi: if drrReport -> natureOfCounterparty2 = F
                        then Create_FinancialInstitutionSector1__1(
                                drrReport -> corporateSectorOfTheCounterparty2,
                                drrReport -> clearingThresholdOfCounterparty2
                            ),
                    nfi: if drrReport -> natureOfCounterparty2 = N
                        then Create_NonFinancialInstitutionSector10__2(
                                drrReport -> corporateSectorOfTheCounterparty2,
                                drrReport -> clearingThresholdOfCounterparty2
                            ),
                    cntrlCntrPty: if drrReport -> natureOfCounterparty2 = C
                        then NoReasonCode -> NORE,
                    othr: if drrReport -> natureOfCounterparty2 = C
                        then NoReasonCode -> NORE
                },
                rptgOblgtn: drrReport -> reportingObligationOfTheCounterparty2,
            },
            brkr: Create_OrganisationIdentification15Choice__1(drrReport -> brokerID),
            submitgAgt: GetSubmitgAgt(drrReport),
            clrMmb: Create_PartyIdentification248Choice__1(drrReport -> clearingMember),
            nttyRspnsblForRpt: GetNttyRspnsblForRpt(drrReport)
        }

func Create_TradeCounterpartyReport20__2:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        ctrPty TradeCounterpartyReport20__2 (1..1)

    set ctrPty:
        TradeCounterpartyReport20__2 {
            rptgCtrPty: Counterparty45__2 {
                id: Create_PartyIdentification248Choice__1(drrReport -> counterparty1)
            },
            othrCtrPty: Counterparty46__2 {
                idTp: Create_PartyIdentification248Choice__3(drrReport)
            },
            submitgAgt: GetSubmitgAgt(drrReport),
            nttyRspnsblForRpt: GetNttyRspnsblForRpt(drrReport)
        }

func GetSubmitgAgt:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        submitgAgt OrganisationIdentification15Choice__1 (1..1)

    set submitgAgt:
        Create_OrganisationIdentification15Choice__1(drrReport -> reportSubmittingEntityID)

func GetNttyRspnsblForRpt:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        nttyRspnsblForRpt OrganisationIdentification15Choice__1 (1..1)

    set nttyRspnsblForRpt:
        Create_OrganisationIdentification15Choice__1(
                drrReport -> entityResponsibleForReporting
            )

// PartyIdentification248Choice
func Create_PartyIdentification248Choice__1:
    inputs:
        lei string (1..1)
    output:
        id PartyIdentification248Choice__1 (1..1)

    set id:
        PartyIdentification248Choice__1 {
            lgl: LegalPersonIdentification1__1 {
                id: Create_OrganisationIdentification15Choice__1(lei)
        }}

func Create_PartyIdentification248Choice__2:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        id PartyIdentification248Choice__2 (1..1)

    set id:
        PartyIdentification248Choice__2 {
            lgl: if drrReport -> counterparty2IdentifierType = True
                then LegalPersonIdentification1__1 {
                    id: Create_OrganisationIdentification15Choice__1(
                            drrReport -> counterparty2
                        )
                },
            ntrl: if drrReport -> counterparty2IdentifierType = False
                then NaturalPersonIdentification3__1 {
                    id: NaturalPersonIdentification2__1 {
                        id: GenericIdentification175__2 {
                            id: drrReport -> counterparty2
                    }},
                    ctry: drrReport -> countryOfTheCounterparty2 to-string
        }}

func Create_PartyIdentification248Choice__3:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        id PartyIdentification248Choice__3 (1..1)

    set id:
        PartyIdentification248Choice__3 {
            lgl: if drrReport -> counterparty2IdentifierType = True
                then LegalPersonIdentification1__1 {
                    id: Create_OrganisationIdentification15Choice__1(
                            drrReport -> counterparty2
                        )
                },
            ntrl: if drrReport -> counterparty2IdentifierType = False
                then NaturalPersonIdentification3__2 {
                    id: NaturalPersonIdentification2__1 {
                        id: GenericIdentification175__2 {
                            id: drrReport -> counterparty2
                    }},
                    ctry: drrReport -> countryOfTheCounterparty2 to-string
        }}

// OrganisationIdentification15Choice
func Create_OrganisationIdentification15Choice__1:
    inputs:
        lei string (1..1)
    output:
        id OrganisationIdentification15Choice__1 (1..1)

    set id:
        OrganisationIdentification15Choice__1 {
            lei: lei
        }

func Create_FinancialInstitutionSector1__1:
    inputs:
        corporateSectorOfCounterparty string (0..*)
        clearingThresholdOfCounterparty boolean (0..1)
    output:
        out FinancialInstitutionSector1__1 (1..1)

    set out:
        FinancialInstitutionSector1__1 {
            sctr: corporateSectorOfCounterparty
                extract
                    FinancialPartyClassification2Choice__1 {
                        cd: item to-enum FinancialPartySectorType3Code__1
                    },
            clrThrshld: clearingThresholdOfCounterparty
        }

func Create_NonFinancialInstitutionSector10__1:
    inputs:
        corporateSectorOfCounterparty string (0..*)
        clearingThresholdOfCounterparty boolean (0..1)
        directlyLinkedToCommercialActivityOrTreasuryFinancing boolean (0..1)
    output:
        out NonFinancialInstitutionSector10__1 (1..1)

    set out:
        NonFinancialInstitutionSector10__1 {
            sctr: corporateSectorOfCounterparty
                extract
                    GenericIdentification175__1 {
                        id: item
                    },
            clrThrshld: clearingThresholdOfCounterparty,
            drctlyLkdActvty: directlyLinkedToCommercialActivityOrTreasuryFinancing
        }

func Create_NonFinancialInstitutionSector10__2:
    inputs:
        corporateSectorOfCounterparty string (0..*)
        clearingThresholdOfCounterparty boolean (0..1)
    output:
        out NonFinancialInstitutionSector10__2 (1..1)

    set out:
        NonFinancialInstitutionSector10__2 {
            sctr: corporateSectorOfCounterparty
                extract
                    GenericIdentification175__1 {
                        id: item
                    },
            clrThrshld: clearingThresholdOfCounterparty
        }

// CommonTradeDataReport69
func Create_CommonTradeDataReport69__1:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        cmonTradData CommonTradeDataReport69__1 (1..1)

    set cmonTradData:
        CommonTradeDataReport69__1 {
            ctrctData: Create_ContractType14__1(drrReport),
            txData: Create_TradeTransaction49__1(drrReport)
        }

func Create_CommonTradeDataReport69__2:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        cmonTradData CommonTradeDataReport69__2 (1..1)

    set cmonTradData:
        CommonTradeDataReport69__2 {
            ctrctData: Create_ContractType14__1(drrReport),
            txData: Create_TradeTransaction49__2(drrReport)
        }

func Create_CommonTradeDataReport69__3:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        cmonTradData CommonTradeDataReport69__3 (1..1)

    set cmonTradData:
        CommonTradeDataReport69__3 {
            ctrctData: Create_ContractType14__1(drrReport),
            txData: Create_TradeTransaction49__3(drrReport)
        }

func Create_CommonTradeDataReport69__4:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        cmonTradData CommonTradeDataReport69__4 (1..1)

    set cmonTradData:
        CommonTradeDataReport69__4 {
            txData: Create_TradeTransaction49__4(drrReport)
        }

func Create_CommonTradeDataReport69__5:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        cmonTradData CommonTradeDataReport69__5 (1..1)

    set cmonTradData:
        CommonTradeDataReport69__5 {
            ctrctData: Create_ContractType14__1(drrReport),
            txData: Create_TradeTransaction49__5(drrReport)
        }

func Create_CommonTradeDataReport69__6:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        cmonTradData CommonTradeDataReport69__6 (1..1)

    set cmonTradData:
        CommonTradeDataReport69__6 {
            txData: Create_TradeTransaction49__6(drrReport)
        }

// ContractType14
func Create_ContractType14__1:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        ctrctData ContractType14__1 (1..1)

    set ctrctData:
        ContractType14__1 {
            pdctId: SecurityIdentification46__1 {
                isin: drrReport -> isin,
                unqPdctIdr: UniqueProductIdentifier2Choice__1 {
                    id: drrReport -> uniqueProductIdentifier
            }},
            pdctClssfctn: drrReport -> productClassification,
            ctrctTp: drrReport -> contractType to-enum FinancialInstrumentContractType2Code,
            asstClss: drrReport -> assetClass to-enum ProductType4Code__1,
            derivBasedOnCrptAsst: drrReport -> cryptoAssetUnderlyingIndicator,
            undrlygInstrm: SecurityIdentification41Choice__1 {
                isin: if drrReport -> underlyingIdentificationType = I
                    then drrReport -> underlyingIdentification,
                indx: IndexIdentification1__1 {
                    indx: if drrReport -> underlyingIdentificationType = X
                        then drrReport -> indicatorOfTheUnderlyingIndex
                        last
                        to-enum FloatingRateIndex1Code,
                    nm: if drrReport -> underlyingIdentificationType = X
                        then drrReport -> nameOfTheUnderlyingIndex last,
                    ...
                },
                bskt: CustomBasket4__1 {
                    id: drrReport -> customBasketCode,
                    cnsttnts: drrReport -> basketConstituents -> identifier
                        extract
                            BasketConstituents3__1 {
                                instrmId: InstrumentIdentification6Choice__1 {
                                    isin: item
                    }},
                    ...
            }},
            sttlmCcy: CurrencyExchange23__1 {
                ccy: drrReport -> leg1 -> settlementCurrency to-string
            },
            sttlmCcyScndLeg: CurrencyExchange23__1 {
                ccy: drrReport -> leg2 -> settlementCurrency to-string
        }}

// TradeTransaction49
func Create_TradeTransaction49__1:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        txData TradeTransaction49__1 (1..1)

    set txData:
        TradeTransaction49__1 {
            txId: UniqueTransactionIdentifier2Choice__1 {
                unqTxIdr: drrReport -> uniqueTransactionIdentifier
            },
            prrTxId: GetPrrTxId(drrReport),
            collPrtflCd: GetCollPrtflCd(drrReport),
            rptTrckgNb: GetRptTrckgNb(drrReport),
            pltfmIdr: GetPltfmIdr(drrReport),
            txPric: GetTxPric(drrReport),
            ntnlAmt: GetNtnlAmt(drrReport),
            ntnlQty: GetNtnlQty(drrReport),
            dlvryTp: GetDlvryTp(drrReport),
            exctnTmStmp: GetExctnTmStmp(drrReport),
            fctvDt: GetFctvDt(drrReport),
            xprtnDt: GetXprtnDt(drrReport),
            sttlmDt: GetSttlmDt(drrReport),
            mstrAgrmt: GetMstrAgrmt(drrReport),
            pstTradRskRdctnFlg: GetPstTradRskRdctnFlg(drrReport),
            pstTradRskRdctnEvt: GetPstTradRskRdctnEvt(drrReport),
            derivEvt: GetDerivEvt1(drrReport),
            tradConf: GetTradConf(drrReport),
            tradClr: GetTradClr(drrReport),
            intrstRate: GetIntrstRate(drrReport),
            ccy: GetCcy(drrReport),
            cmmdty: GetCmmdty(drrReport),
            optn: GetOptn(drrReport),
            nrgySpcfcAttrbts: GetNrgySpcfcAttrbts(drrReport),
            cdt: GetCdt(drrReport),
            othrPmt: GetOthrPmt(drrReport),
            packg: GetPackg(drrReport)
        }

func Create_TradeTransaction49__2:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        txData TradeTransaction49__2 (1..1)

    set txData:
        TradeTransaction49__2 {
            txId: GetTxId(drrReport),
            prrTxId: GetPrrTxId(drrReport),
            collPrtflCd: GetCollPrtflCd(drrReport),
            rptTrckgNb: GetRptTrckgNb(drrReport),
            pltfmIdr: GetPltfmIdr(drrReport),
            txPric: GetTxPric(drrReport),
            ntnlAmt: GetNtnlAmt(drrReport),
            ntnlQty: GetNtnlQty2(drrReport),
            dlvryTp: GetDlvryTp(drrReport),
            exctnTmStmp: GetExctnTmStmp(drrReport),
            fctvDt: GetFctvDt(drrReport),
            xprtnDt: GetXprtnDt(drrReport),
            sttlmDt: GetSttlmDt(drrReport),
            mstrAgrmt: GetMstrAgrmt(drrReport),
            pstTradRskRdctnFlg: GetPstTradRskRdctnFlg(drrReport),
            pstTradRskRdctnEvt: GetPstTradRskRdctnEvt(drrReport),
            derivEvt: GetDerivEvt2(drrReport),
            tradConf: GetTradConf(drrReport),
            tradClr: GetTradClr(drrReport),
            intrstRate: GetIntrstRate(drrReport),
            ccy: GetCcy(drrReport),
            cmmdty: GetCmmdty(drrReport),
            optn: GetOptn(drrReport),
            nrgySpcfcAttrbts: GetNrgySpcfcAttrbts(drrReport),
            cdt: GetCdt(drrReport),
            othrPmt: GetOthrPmt(drrReport),
            packg: GetPackg(drrReport),
            ...
        }

func Create_TradeTransaction49__3:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        txData TradeTransaction49__3 (1..1)

    set txData:
        TradeTransaction49__3 {
            txId: GetTxId(drrReport),
            prrTxId: GetPrrTxId(drrReport),
            collPrtflCd: GetCollPrtflCd(drrReport),
            earlyTermntnDt: drrReport -> earlyTerminationDate,
            rptTrckgNb: GetRptTrckgNb(drrReport),
            pltfmIdr: GetPltfmIdr(drrReport),
            txPric: GetTxPric(drrReport),
            ntnlAmt: GetNtnlAmt(drrReport),
            ntnlQty: GetNtnlQty2(drrReport),
            dlvryTp: GetDlvryTp(drrReport),
            exctnTmStmp: GetExctnTmStmp(drrReport),
            fctvDt: GetFctvDt(drrReport),
            xprtnDt: GetXprtnDt(drrReport),
            sttlmDt: GetSttlmDt(drrReport),
            mstrAgrmt: GetMstrAgrmt(drrReport),
            pstTradRskRdctnFlg: GetPstTradRskRdctnFlg(drrReport),
            pstTradRskRdctnEvt: GetPstTradRskRdctnEvt(drrReport),
            derivEvt: GetDerivEvt3(drrReport),
            tradConf: GetTradConf(drrReport),
            tradClr: GetTradClr(drrReport),
            intrstRate: GetIntrstRate(drrReport),
            ccy: GetCcy(drrReport),
            cmmdty: GetCmmdty(drrReport),
            optn: GetOptn(drrReport),
            nrgySpcfcAttrbts: GetNrgySpcfcAttrbts(drrReport),
            cdt: GetCdt(drrReport),
            othrPmt: GetOthrPmt(drrReport),
            packg: GetPackg(drrReport),
            ...
        }

func Create_TradeTransaction49__4:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        txData TradeTransaction49__4 (1..1)

    set txData:
        TradeTransaction49__4 {
            txId: GetTxId(drrReport),
            collPrtflCd: GetCollPrtflCd(drrReport),
            earlyTermntnDt: drrReport -> earlyTerminationDate,
            pstTradRskRdctnFlg: GetPstTradRskRdctnFlg(drrReport),
            pstTradRskRdctnEvt: GetPstTradRskRdctnEvt(drrReport),
            derivEvt: GetDerivEvt4(drrReport),
            ...
        }

func Create_TradeTransaction49__5:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        txData TradeTransaction49__5 (1..1)

    set txData:
        TradeTransaction49__5 {
            txId: UniqueTransactionIdentifier2Choice__1 {
                unqTxIdr: drrReport -> uniqueTransactionIdentifier
            },
            sbsqntTxId: empty,
            prrTxId: GetPrrTxId(drrReport),
            collPrtflCd: GetCollPrtflCd(drrReport),
            rptTrckgNb: GetRptTrckgNb(drrReport),
            pltfmIdr: GetPltfmIdr(drrReport),
            txPric: GetTxPric(drrReport),
            ntnlAmt: GetNtnlAmt(drrReport),
            ntnlQty: GetNtnlQty2(drrReport),
            dlvryTp: GetDlvryTp(drrReport),
            exctnTmStmp: GetExctnTmStmp(drrReport),
            fctvDt: GetFctvDt(drrReport),
            xprtnDt: GetXprtnDt(drrReport),
            sttlmDt: GetSttlmDt(drrReport),
            mstrAgrmt: GetMstrAgrmt(drrReport),
            pstTradRskRdctnFlg: GetPstTradRskRdctnFlg(drrReport),
            pstTradRskRdctnEvt: GetPstTradRskRdctnEvt(drrReport),
            derivEvt: GetDerivEvt5(drrReport),
            tradConf: GetTradConf(drrReport),
            tradClr: GetTradClr(drrReport),
            intrstRate: GetIntrstRate(drrReport),
            ccy: GetCcy(drrReport),
            cmmdty: GetCmmdty(drrReport),
            optn: GetOptn(drrReport),
            nrgySpcfcAttrbts: GetNrgySpcfcAttrbts(drrReport),
            cdt: GetCdt(drrReport),
            othrPmt: GetOthrPmt(drrReport),
            packg: GetPackg(drrReport)
        }

func Create_TradeTransaction49__6:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        txData TradeTransaction49__6 (1..1)

    set txData:
        TradeTransaction49__6 {
            txId: GetTxId(drrReport),
            collPrtflCd: GetCollPrtflCd(drrReport),
            pstTradRskRdctnFlg: GetPstTradRskRdctnFlg(drrReport),
            pstTradRskRdctnEvt: GetPstTradRskRdctnEvt(drrReport),
            derivEvt: GetDerivEvt5(drrReport),
        }

// TradeTransaction49 helper funcs
func GetTxId:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        txId UniqueTransactionIdentifier2Choice__2 (1..1)

    set txId:
        UniqueTransactionIdentifier2Choice__2 {
            unqTxIdr: drrReport -> uniqueTransactionIdentifier,
            prtry: if drrReport -> uniqueTransactionIdentifierProprietary exists
                then GenericIdentification175__2 {
                    id: drrReport -> priorUTIProprietary
        }}

func GetPrrTxId:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        prrTxId UniqueTransactionIdentifier3Choice__1 (1..1)

    set prrTxId:
        UniqueTransactionIdentifier3Choice__1 {
            unqTxIdr: if drrReport -> priorUTI exists
                then drrReport -> priorUTI,
            prtry: if drrReport -> priorUTIProprietary exists
                then GenericIdentification175__2 {
                    id: drrReport -> priorUTIProprietary
                },
            ...
        }

func GetCollPrtflCd:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        collPrtflCd CollateralPortfolioCode5Choice__1 (1..1)

    set collPrtflCd:
        CollateralPortfolioCode5Choice__1 {
            prtfl: PortfolioCode3Choice {
                cd: if drrReport -> collateralPortfolioIndicator = True
                    then drrReport -> collateralPortfolioCode,
                noPrtfl: if drrReport -> collateralPortfolioIndicator = False
                    then NotApplicable1Code -> NOAP
        }}

func GetRptTrckgNb:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        rptTrckgNb Max52Text (1..1)

    set rptTrckgNb: drrReport -> reportTrackingNumber

func GetPltfmIdr:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        pltfmIdr MICIdentifier (1..1)

    set pltfmIdr: drrReport -> venueOfExecution

func GetTxPric: // EMIR
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        txPric PriceData2__1 (1..1)

    set txPric -> pric:
        drrReport
            extract
                SecuritiesTransactionPrice17Choice__1 {
                    mntryVal: if priceNotation = Monetary
                        then AmountAndDirection106__1 {
                            amt: ActiveOrHistoricCurrencyAnd13DecimalAmount__1 {
                                value: price -> monetary,
                                ccy: drrReport -> priceCurrency to-string
                            },
                            ...
                        },
                    pctg: if priceNotation = Percentage
                        then price -> percentage
                }

    add txPric -> schdlPrd:
        drrReport -> priceSchedule
            extract
                Schedule1 {
                    uadjstdFctvDt: effectiveDate,
                    uadjstdEndDt: endDate,
                    pric: SecuritiesTransactionPrice17Choice {
                        mntryVal: AmountAndDirection106 {
                            amt: ActiveOrHistoricCurrencyAnd19DecimalAmount {
                                value: price -> monetary,
                                ccy: drrReport -> priceCurrency to-string
                            },
                            ...
                        },
                        pctg: price -> percentage,
                        ...
        }}

func GetNtnlAmt:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        ntnlAmt NotionalAmountLegs5__1 (1..1)

    set ntnlAmt:
        NotionalAmountLegs5__1 {
            frstLeg: NotionalAmount5__1 {
                amt: AmountAndDirection106__2 {
                    amt: ActiveOrHistoricCurrencyAnd5DecimalAmount__1 {
                        value: drrReport -> leg1 -> notionalAmount,
                        ccy: drrReport -> leg1 -> notionalCurrency to-string
                }},
                schdlPrd: drrReport -> leg1 -> notionalAmountSchedule
                    extract
                        Schedule11__1 {
                            uadjstdFctvDt: effectiveDate,
                            amt: AmountAndDirection106__2 {
                                amt: ActiveOrHistoricCurrencyAnd5DecimalAmount__1 {
                                    value: value,
                                    ccy: drrReport -> leg1 -> notionalCurrency to-string
                            }},
                            ...
            }},
            scndLeg: NotionalAmount6__1 {
                amt: AmountAndDirection106__2 {
                    amt: ActiveOrHistoricCurrencyAnd5DecimalAmount__1 {
                        value: drrReport -> leg2 -> notionalAmount,
                        ccy: drrReport -> leg2 -> notionalCurrency to-string
                }},
                schdlPrd: drrReport -> leg2 -> notionalAmountSchedule
                    extract
                        Schedule11__1 {
                            uadjstdFctvDt: effectiveDate,
                            amt: AmountAndDirection106__2 {
                                amt: ActiveOrHistoricCurrencyAnd5DecimalAmount__1 {
                                    value: value,
                                    ccy: drrReport -> leg2 -> notionalCurrency to-string
                            }},
                            ...
        }} // TODO: Notional Amount End Date
        }

func GetNtnlQty:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        ntnlQty NotionalQuantityLegs5__1 (1..1)

    set ntnlQty:
        NotionalQuantityLegs5__1 {
            frstLeg: NotionalQuantity9__1 {
                ttlQty: drrReport -> leg1 -> totalNotionalQuantity,
                dtls: QuantityOrTerm1Choice__1 {
                    schdlPrd: drrReport -> leg1 -> notionalQuantitySchedule
                        extract
                            Schedule10__1 {
                                uadjstdFctvDt: effectiveDate,
                                uadjstdEndDt: endDate,
                                qty: value
            }}},
            scndLeg: NotionalQuantity9__2 {
                ttlQty: drrReport -> leg2 -> totalNotionalQuantity,
                ...
        } // TODO: Notional Amount End Date
        }

func GetNtnlQty2:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        ntnlQty NotionalQuantityLegs5__2 (1..1)

    set ntnlQty:
        NotionalQuantityLegs5__2 {
            frstLeg: NotionalQuantity9__2 {
                ttlQty: drrReport -> leg1 -> totalNotionalQuantity,
                dtls: QuantityOrTerm1Choice__1 {
                    schdlPrd: drrReport -> leg1 -> notionalQuantitySchedule
                        extract
                            Schedule10__1 {
                                uadjstdFctvDt: effectiveDate,
                                uadjstdEndDt: endDate,
                                qty: value
            }}},
            scndLeg: NotionalQuantity9__2 {
                ttlQty: drrReport -> leg2 -> totalNotionalQuantity,
                dtls: QuantityOrTerm1Choice__1 {
                    schdlPrd: drrReport -> leg2 -> notionalQuantitySchedule
                        extract
                            Schedule10__1 {
                                uadjstdFctvDt: effectiveDate,
                                uadjstdEndDt: endDate,
                                qty: value
        }}} // TODO: Notional Amount End Date
        }

func GetDlvryTp:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        dlvryTp PhysicalTransferType4Code (1..1)

    set dlvryTp: drrReport -> deliveryType to-enum PhysicalTransferType4Code

func GetExctnTmStmp:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        exctnTmStmp zonedDateTime (1..1)

    set exctnTmStmp: drrReport -> executionTimestamp

func GetFctvDt:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        fctvDt ISODate (1..1)

    set fctvDt: drrReport -> effectiveDate

func GetXprtnDt:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        xprtnDt ISODate (1..1)

    set xprtnDt: drrReport -> expirationDate

func GetSttlmDt:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        sttlmDt date (1..1)

    set sttlmDt: drrReport -> finalContractualSettlementDate

func GetMstrAgrmt:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        mstrAgrmt MasterAgreement8__1 (1..1)

    set mstrAgrmt:
        MasterAgreement8__1 {
            tp: AgreementType2Choice__1 {
                tp: drrReport -> masterAgreementType to-enum MasterAgreementType2Code
            },
            othrMstrAgrmtDtls: drrReport -> otherMasterAgreementType,
            vrsn: drrReport -> masterAgreementVersion to-string
        }

func GetPstTradRskRdctnFlg:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        pstTradRskRdctnFlg TrueFalseIndicator (1..1)

    set pstTradRskRdctnFlg: drrReport -> ptrr

func GetPstTradRskRdctnEvt:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        pstTradRskRdctnEvt PTRREvent2__1 (1..1)

    set pstTradRskRdctnEvt:
        PTRREvent2__1 {
            tchnq: drrReport -> typeOfPTRRTechnique to-enum  RiskReductionService1Code__1,
            svcPrvdr: Create_OrganisationIdentification15Choice__1(
                    drrReport -> ptrrServiceProvider
                )
        }

// DerivativeEvent6
func GetDerivEvt1:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        derivEvt DerivativeEvent6__1 (1..1)

    set derivEvt:
        DerivativeEvent6__1 {
            id: EventIdentifier1Choice__1 {
                pstTradRskRdctnIdr: PostTradeRiskReductionIdentifier1__1 {
                    id: empty, // TODO
                    strr: drrReport -> ptrrId
            }},
            tp: GetDerivEvtTp(drrReport),
            tmStmp: GetDerivEvtTmStmp(drrReport)
        }

func GetDerivEvt2:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        derivEvt DerivativeEvent6__2 (1..1)

    set derivEvt:
        DerivativeEvent6__2 {
            id: GetDerivEvtId(drrReport),
            tp: GetDerivEvtTp(drrReport),
            tmStmp: GetDerivEvtTmStmp(drrReport)
        }

func GetDerivEvt3:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        derivEvt DerivativeEvent6__3 (1..1)

    set derivEvt:
        DerivativeEvent6__3 {
            id: GetDerivEvtId(drrReport),
            tmStmp: GetDerivEvtTmStmp(drrReport)
        }

func GetDerivEvt4:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        derivEvt DerivativeEvent6__4 (1..1)

    set derivEvt:
        DerivativeEvent6__4 {
            id: GetDerivEvtId(drrReport),
            tp: GetDerivEvtTp(drrReport),
            tmStmp: GetDerivEvtTmStmp(drrReport)
        }

func GetDerivEvt5:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        derivEvt DerivativeEvent6__5 (1..1)

    set derivEvt:
        DerivativeEvent6__5 {
            tmStmp: GetDerivEvtTmStmp(drrReport)
        }

//
func GetDerivEvtId:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        id EventIdentifier1Choice__2 (1..1)

    set id:
        EventIdentifier1Choice__2 {
            pstTradRskRdctnIdr: PostTradeRiskReductionIdentifier1__2 {
                id: empty, // TODO
                strr: drrReport -> ptrrId
        }}

func GetDerivEvtTp:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        tp DerivativeEventType3Code__1 (1..1)

    set tp: drrReport -> eventType to-enum DerivativeEventType3Code__1

func GetDerivEvtTmStmp:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        tmStmp DateAndDateTime2Choice__1 (1..1)

    set tmStmp:
        DateAndDateTime2Choice__1 {
            dt: drrReport -> eventDate
        }

func GetTradConf:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        tradConf TradeConfirmation1Choice (1..1)

    set tradConf:
        TradeConfirmation1Choice {
            confd: TradeConfirmation2 {
                tmStmp: if drrReport -> confirmed <> NCNF
                    then drrReport -> confirmationTimestamp,
                tp: if drrReport -> confirmed <> NCNF
                    then drrReport -> confirmed to-enum TradeConfirmationType1Code
            },
            nonConfd: TradeNonConfirmation1 {
                tp: if drrReport -> confirmed = NCNF
                    then drrReport -> confirmed to-enum TradeConfirmationType2Code
        }}

func GetTradClr:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        tradClr TradeClearing11__1 (1..1)

    set tradClr:
        TradeClearing11__1 {
            clrOblgtn: drrReport -> clearingObligation to-enum ClearingObligationType1Code,
            clrSts: Cleared23Choice__1 {
                clrd: if drrReport -> cleared = Y
                    then ClearingPartyAndTime21Choice__1 {
                        dtls: ClearingPartyAndTime22__1 {
                            ccp: Create_OrganisationIdentification15Choice__1(
                                    drrReport -> centralCounterparty
                                ),
                            clrDtTm: drrReport -> clearingTimestamp
                }},
                nonClrd: if drrReport -> cleared = N
                    then ClearingExceptionOrExemption3Choice__1 {
                        rsn: NoReasonCode -> NORE
            }},
            intraGrp: drrReport -> intragroup
        }

func GetIntrstRate:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        intrstRate InterestRateLegs14__1 (1..1)

    set intrstRate:
        InterestRateLegs14__1 {
            frstLeg: drrReport -> leg1
                extract
                    InterestRate33Choice__1 {
                        fxd: Create_FixedRate(
                                fixedRate,
                                periodicPayment -> fixedRateDayCountConvention to-enum InterestComputationMethod4Code,
                                periodicPayment -> fixedRatePaymentFrequencyPeriod to-enum Frequency13Code__1,
                                periodicPayment -> fixedRatePaymentFrequencyPeriodMultiplier
                            ),
                        fltg: Create_FloatingRate(
                                periodicPayment -> floatingRateIdentifier,
                                periodicPayment -> nameOfTheFloatingRate,
                                periodicPayment -> floatingRateIndicator to-enum FloatingRateIndex1Code,
                                periodicPayment -> floatingRateReferencePeriod to-string,
                                periodicPayment -> floatingRateReferencePeriodMultiplier,
                                spread -> monetary,
                                spread -> percentage,
                                spread -> basis,
                                spreadCurrency to-string,
                                spreadNotation,
                                periodicPayment -> floatingRateDayCountConvention to-enum InterestComputationMethod4Code,
                                periodicPayment -> floatingRatePaymentFrequencyPeriod to-enum Frequency13Code__1,
                                periodicPayment -> floatingRatePaymentFrequencyPeriodMultiplier,
                                periodicPayment -> floatingRateResetFrequencyPeriod to-string,
                                periodicPayment -> floatingRateResetFrequencyMultiplier
                            )
                    },
            scndLeg: drrReport -> leg2
                extract
                    InterestRate33Choice__1 {
                        fxd: Create_FixedRate(
                                fixedRate,
                                periodicPayment -> fixedRateDayCountConvention to-enum InterestComputationMethod4Code,
                                periodicPayment -> fixedRatePaymentFrequencyPeriod to-enum Frequency13Code__1,
                                periodicPayment -> fixedRatePaymentFrequencyPeriodMultiplier
                            ),
                        fltg: Create_FloatingRate(
                                periodicPayment -> floatingRateIdentifier,
                                periodicPayment -> nameOfTheFloatingRate,
                                periodicPayment -> floatingRateIndicator to-enum FloatingRateIndex1Code,
                                periodicPayment -> floatingRateReferencePeriod to-string,
                                periodicPayment -> floatingRateReferencePeriodMultiplier,
                                spread -> monetary,
                                spread -> percentage,
                                spread -> basis,
                                spreadCurrency to-string,
                                spreadNotation,
                                periodicPayment -> floatingRateDayCountConvention to-enum InterestComputationMethod4Code,
                                periodicPayment -> floatingRatePaymentFrequencyPeriod to-enum Frequency13Code__1,
                                periodicPayment -> floatingRatePaymentFrequencyPeriodMultiplier,
                                periodicPayment -> floatingRateResetFrequencyPeriod to-string,
                                periodicPayment -> floatingRateResetFrequencyMultiplier
                            )
        },}

func Create_FixedRate:
    inputs:
        fixedRate iso.Max11Number (0..1)
        fixedRateDayCountConvention InterestComputationMethod4Code (0..1)
        fixedRatePaymentFrequencyPeriod Frequency13Code__1 (0..1)
        fixedRatePaymentFrequencyPeriodMultiplier Max3Number (0..1)
    output:
        out FixedRate10__1 (1..1)

    set out:
        FixedRate10__1 {
            rate: SecuritiesTransactionPrice14Choice__1 {
                rate: fixedRate
            },
            dayCnt: InterestComputationMethodFormat7__1 {
                cd: fixedRateDayCountConvention
            },
            pmtFrqcy: InterestRateFrequency3Choice__1 {
                term: InterestRateContractTerm4__1 {
                    unit: fixedRatePaymentFrequencyPeriod to-enum Frequency13Code__1,
                    val: fixedRatePaymentFrequencyPeriodMultiplier
        }}}

func Create_FloatingRate:
    inputs:
        identifierOfFloatingRate ISINOct2015Identifier (0..1)
        nameOfTheFloatingRate iso.Max50AlphaNumericText (0..1)
        indicatorOfTheFloatingRate FloatingRateIndex1Code (0..1)
        floatingRateReferencePeriodTimePeriod string (0..1)
        floatingRateReferencePeriodMultiplier Max3Number (0..1)
        spreadOfLeg1Monetary BaseOne18Rate (0..1)
        spreadOfLeg1Percentage BaseOneRate (0..1)
        spreadOfLeg1Basis iso.BasisFormat (0..1)
        spreadCurrencyOfLeg1 string (0..1)
        spreadOfLeg1Notation PriceNotationEnum (0..1)
        floatingRateDayCountConvention InterestComputationMethod4Code (0..1)
        floatingRatePaymentFrequencyPeriod Frequency13Code__1 (0..1)
        floatingRatePaymentFrequencyPeriodMultiplier Max3Number (0..1)
        floatingRateResetFrequencyPeriod string (0..1)
        floatingRateResetFrequencyPeriodMultiplier Max3Number (0..1)
    output:
        out FloatingRate13__1 (1..1)

    set out:
        FloatingRate13__1 {
            id: identifierOfFloatingRate,
            nm: nameOfTheFloatingRate,
            rate: FloatingRateIdentification8Choice__1 {
                cd: indicatorOfTheFloatingRate
            },
            refPrd: InterestRateContractTerm4__1 {
                unit: floatingRateReferencePeriodTimePeriod to-enum Frequency13Code__1,
                val: floatingRateReferencePeriodMultiplier
            },
            sprd: SecuritiesTransactionPrice20Choice__1 {
                mntryVal: if spreadOfLeg1Notation = Monetary
                    then AmountAndDirection106__1 {
                        amt: ActiveOrHistoricCurrencyAnd13DecimalAmount__1 {
                            value: spreadOfLeg1Monetary,
                            ccy: spreadCurrencyOfLeg1 to-string
                        },
                        ...
                    },
                pctg: if spreadOfLeg1Notation = Percentage
                    then spreadOfLeg1Percentage,
                bsisPtSprd: if spreadOfLeg1Notation = Basis
                    then spreadOfLeg1Basis
            },
            dayCnt: InterestComputationMethodFormat7__1 {
                cd: floatingRateDayCountConvention
            },
            pmtFrqcy: InterestRateFrequency3Choice__1 {
                term: InterestRateContractTerm4__1 {
                    unit: floatingRatePaymentFrequencyPeriod,
                    val: floatingRatePaymentFrequencyPeriodMultiplier
            }},
            rstFrqcy: InterestRateFrequency3Choice__1 {
                term: InterestRateContractTerm4__1 {
                    unit: floatingRateResetFrequencyPeriod to-enum Frequency13Code__1,
                    val: floatingRateResetFrequencyPeriodMultiplier
        }}}

func GetCcy:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        ccy CurrencyExchange22__1 (1..1)

    set ccy:
        CurrencyExchange22__1 {
            xchgRate: drrReport -> exchangeRate,
            fwdXchgRate: drrReport -> forwardExchangeRate,
            xchgRateBsis: ExchangeRateBasis1Choice__1 {
                ccyPair: ExchangeRateBasis1 {
                    baseCcy: if drrReport -> assetClass = CURR
                        then SubString(drrReport -> exchangeRateBasis, 1, 3),
                    qtdCcy: if drrReport -> assetClass = CURR
                        then SubString(drrReport -> exchangeRateBasis, 5, 3)
        }}}

func GetCmmdty:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        cmmdty AssetClassCommodity6Choice__1 (1..1)

    set cmmdty:
        AssetClassCommodity6Choice__1 {
            // AGRICULTURE
            agrcltrl: AssetClassCommodityAgricultural6Choice {
                grnOilSeed: if drrReport -> assetClass = COMM
                        and drrReport -> baseProduct = "AGRI"
                        and drrReport -> subProduct = "GROS"
                    then AgriculturalCommodityOilSeed2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType1Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType1Code,
                        addtlSubPdct: drrReport -> furtherSubProduct to-enum AssetClassDetailedSubProductType1Code
                    },
                soft: if drrReport -> assetClass = COMM
                        and drrReport -> baseProduct = "AGRI"
                        and drrReport -> subProduct = "SOFT"
                    then AgriculturalCommoditySoft2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType1Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType2Code,
                        addtlSubPdct: drrReport -> furtherSubProduct to-enum AssetClassDetailedSubProductType2Code
                    },
                ptt: if drrReport -> assetClass = COMM
                        and drrReport -> baseProduct = "AGRI"
                        and drrReport -> subProduct = "POTA"
                    then AgriculturalCommodityPotato2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType1Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType45Code
                    },
                olvOil: if drrReport -> assetClass = COMM
                        and drrReport -> baseProduct = "AGRI"
                        and drrReport -> subProduct = "OOLI"
                    then AgriculturalCommodityOliveOil3 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType1Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType3Code,
                        addtlSubPdct: drrReport -> furtherSubProduct to-enum AssetClassDetailedSubProductType29Code
                    },
                dairy: if drrReport -> assetClass = COMM
                        and drrReport -> baseProduct = "AGRI"
                        and drrReport -> subProduct = "DIRY"
                    then AgriculturalCommodityDairy2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType1Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType20Code
                    },
                frstry: if drrReport -> assetClass = COMM
                        and drrReport -> baseProduct = "AGRI"
                        and drrReport -> subProduct = "FRST"
                    then AgriculturalCommodityForestry2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType1Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType21Code
                    },
                sfd: if drrReport -> assetClass = COMM
                        and drrReport -> baseProduct = "AGRI"
                        and drrReport -> subProduct = "SEAF"
                    then AgriculturalCommoditySeafood2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType1Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType23Code
                    },
                liveStock: if drrReport -> assetClass = COMM
                        and drrReport -> baseProduct = "AGRI"
                        and drrReport -> subProduct = "LSTK"
                    then AgriculturalCommodityLiveStock2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType1Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType22Code
                    },
                grn: if drrReport -> assetClass = COMM
                        and drrReport -> baseProduct = "AGRI"
                        and drrReport -> subProduct = "GRIN"
                    then AgriculturalCommodityGrain3 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType1Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType5Code,
                        addtlSubPdct: drrReport -> furtherSubProduct to-enum AssetClassDetailedSubProductType30Code
                    },
                othr: if drrReport -> assetClass = COMM
                        and drrReport -> baseProduct = "AGRI"
                        and drrReport -> subProduct = "OTHR"
                    then AgriculturalCommodityOther2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType1Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType49Code
            },},
            // ENERGY
            nrgy: AssetClassCommodityEnergy3Choice {
                elctrcty: if drrReport -> assetClass = COMM
                        and drrReport -> baseProduct = "NRGY"
                        and drrReport -> subProduct = "ELEC"
                    then EnergyCommodityElectricity2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType2Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType6Code,
                        addtlSubPdct: drrReport -> furtherSubProduct to-enum AssetClassDetailedSubProductType5Code
                    },
                ntrlGas: if drrReport -> assetClass = COMM
                        and drrReport -> baseProduct = "NRGY"
                        and drrReport -> subProduct = "NGAS"
                    then EnergyCommodityNaturalGas3 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType2Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType7Code,
                        addtlSubPdct: drrReport -> furtherSubProduct to-enum AssetClassDetailedSubProductType31Code
                    },
                oil: if drrReport -> assetClass = COMM
                        and drrReport -> baseProduct = "NRGY"
                        and drrReport -> subProduct = "OILP"
                    then EnergyCommodityOil3 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType2Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType8Code,
                        addtlSubPdct: drrReport -> furtherSubProduct to-enum AssetClassDetailedSubProductType32Code
                    },
                coal: if drrReport -> assetClass = COMM
                        and drrReport -> baseProduct = "NRGY"
                        and drrReport -> subProduct = "COAL"
                    then EnergyCommodityCoal2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType2Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType24Code
                    },
                intrNrgy: if drrReport -> assetClass = COMM
                        and drrReport -> baseProduct = "NRGY"
                        and drrReport -> subProduct = "INRG"
                    then EnergyCommodityInterEnergy2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType2Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType26Code
                    },
                rnwblNrgy: if drrReport -> assetClass = COMM
                        and drrReport -> baseProduct = "NRGY"
                        and drrReport -> subProduct = "RNNG"
                    then EnergyCommodityRenewableEnergy2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType2Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType28Code
                    },
                lghtEnd: if drrReport -> assetClass = COMM
                        and drrReport -> baseProduct = "NRGY"
                        and drrReport -> subProduct = "LGHT"
                    then EnergyCommodityLightEnd2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType2Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType27Code
                    },
                dstllts: if drrReport -> assetClass = COMM
                        and drrReport -> baseProduct = "NRGY"
                        and drrReport -> subProduct = "DIST"
                    then EnergyCommodityDistillates2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType2Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType25Code
                    },
                othr: if drrReport -> assetClass = COMM
                        and drrReport -> baseProduct = "NRGY"
                        and drrReport -> subProduct = "OTHR"
                    then EnergyCommodityOther2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType2Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType49Code
            }},
            // ENVIRONMENTAL
            envttl: AssetClassCommodityEnvironmental3Choice {
                emssns: if drrReport -> assetClass = COMM
                        and drrReport -> baseProduct = "ENVR"
                        and drrReport -> subProduct = "EMIS"
                    then EnvironmentalCommodityEmission3 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType3Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType10Code,
                        addtlSubPdct: drrReport -> furtherSubProduct to-enum AssetClassDetailedSubProductType8Code
                    },
                wthr: if drrReport -> assetClass = COMM
                        and drrReport -> baseProduct = "ENVR"
                        and drrReport -> subProduct = "WTHR"
                    then EnvironmentalCommodityWeather2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType3Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType30Code
                    },
                crbnRltd: if drrReport -> assetClass = COMM
                        and drrReport -> baseProduct = "ENVR"
                        and drrReport -> subProduct = "CRBR"
                    then EnvironmentalCommodityCarbonRelated2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType3Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType29Code
                    },
                othr: if drrReport -> assetClass = COMM
                        and drrReport -> baseProduct = "ENVR"
                        and drrReport -> subProduct = "OTHR"
                    then EnvironmentCommodityOther2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType3Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType49Code
            }},
            // FERTILIZER
            frtlzr: AssetClassCommodityFertilizer4Choice {
                ammn: if drrReport -> assetClass = COMM
                        and drrReport -> baseProduct = "FRTL"
                        and drrReport -> subProduct = "AMMO"
                    then FertilizerCommodityAmmonia2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType5Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType39Code
                    },
                dmmnmPhspht: if drrReport -> assetClass = COMM
                        and drrReport -> baseProduct = "FRTL"
                        and drrReport -> subProduct = "DAPH"
                    then FertilizerCommodityDiammoniumPhosphate2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType5Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType40Code
                    },
                ptsh: if drrReport -> assetClass = COMM
                        and drrReport -> baseProduct = "FRTL"
                        and drrReport -> subProduct = "PTSH"
                    then FertilizerCommodityPotash2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType5Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType41Code
                    },
                slphr: if drrReport -> assetClass = COMM
                        and drrReport -> baseProduct = "FRTL"
                        and drrReport -> subProduct = "SLPH"
                    then FertilizerCommoditySulphur2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType5Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType42Code
                    },
                urea: if drrReport -> assetClass = COMM
                        and drrReport -> baseProduct = "FRTL"
                        and drrReport -> subProduct = "UREA"
                    then FertilizerCommodityUrea2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType5Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType43Code
                    },
                ureaAndAmmnmNtrt: if drrReport -> assetClass = COMM
                        and drrReport -> baseProduct = "FRTL"
                        and drrReport -> subProduct = "UAAN"
                    then FertilizerCommodityUreaAndAmmoniumNitrate2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType5Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType44Code
                    },
                othr: if drrReport -> assetClass = COMM
                        and drrReport -> baseProduct = "FRTL"
                        and drrReport -> subProduct = "OTHR"
                    then FertilizerCommodityOther2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType5Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType49Code
            }},
            // FREIGHT
            frght: AssetClassCommodityFreight4Choice {
                dry: if drrReport -> assetClass = COMM
                        and drrReport -> baseProduct = "FRGT"
                        and drrReport -> subProduct = "DRYF"
                    then FreightCommodityDry3 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType4Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType31Code,
                        addtlSubPdct: drrReport -> furtherSubProduct to-enum AssetClassDetailedSubProductType33Code
                    },
                wet: if drrReport -> assetClass = COMM
                        and drrReport -> baseProduct = "FRGT"
                        and drrReport -> subProduct = "WETF"
                    then FreightCommodityWet3 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType4Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType32Code,
                        addtlSubPdct: drrReport -> furtherSubProduct to-enum AssetClassDetailedSubProductType34Code
                    },
                cntnrShip: if drrReport -> assetClass = COMM
                        and drrReport -> baseProduct = "FRGT"
                        and drrReport -> subProduct = "CSHP"
                    then FreightCommodityContainerShip2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType4Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType46Code
                    },
                othr: if drrReport -> assetClass = COMM
                        and drrReport -> baseProduct = "FRGT"
                        and drrReport -> subProduct = "OTHR"
                    then FreightCommodityOther2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType4Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType49Code
            }},
//Industrial Product
            indstrlPdct: AssetClassCommodityIndustrialProduct2Choice {
                cnstrctn: if drrReport -> assetClass = COMM
                        and drrReport -> baseProduct = "INDP"
                        and drrReport -> subProduct = "CSTR"
                    then IndustrialProductCommodityConstruction2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType6Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType33Code
                    },
                manfctg: if drrReport -> assetClass = COMM
                        and drrReport -> baseProduct = "INDP"
                        and drrReport -> subProduct = "MFTG"
                    then IndustrialProductCommodityManufacturing2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType6Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType34Code
            }},
            // Inflation
            infltn: if drrReport -> assetClass = COMM and drrReport -> baseProduct = "INFL"
                then AssetClassCommodityInflation1 {
                    basePdct: drrReport -> baseProduct to-enum AssetClassProductType12Code
                },
            // Metal
            metl: AssetClassCommodityMetal2Choice {
                nonPrcs: if drrReport -> assetClass = COMM
                        and drrReport -> baseProduct = "METL"
                        and drrReport -> subProduct = "NPRM"
                    then MetalCommodityNonPrecious2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType7Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType15Code,
                        addtlSubPdct: drrReport -> furtherSubProduct to-enum AssetClassDetailedSubProductType10Code
                    },
                prcs: if drrReport -> assetClass = COMM
                        and drrReport -> baseProduct = "METL"
                        and drrReport -> subProduct = "PRME"
                    then MetalCommodityPrecious2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType7Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType16Code,
                        addtlSubPdct: drrReport -> furtherSubProduct to-enum AssetClassDetailedSubProductType11Code
            }},
            // Multi Commodity Exotic
            multiCmmdtyExtc: if drrReport -> assetClass = COMM
                    and drrReport -> baseProduct = "MCEX"
                then AssetClassCommodityMultiCommodityExotic1 {
                    basePdct: drrReport -> baseProduct to-enum AssetClassProductType13Code
                },
            // Official Economic Statistics
            offclEcnmcSttstcs: if drrReport -> assetClass = COMM
                    and drrReport -> baseProduct = "OEST"
                then AssetClassCommodityOfficialEconomicStatistics1 {
                    basePdct: drrReport -> baseProduct to-enum AssetClassProductType14Code
                },
            // Other
            othr: if drrReport -> assetClass = COMM and drrReport -> baseProduct = "OTHR"
                then AssetClassCommodityOther1 {
                    basePdct: drrReport -> baseProduct to-enum AssetClassProductType15Code
                },
            // Other C10 commodities
            othrC10: if drrReport -> assetClass = COMM and drrReport -> baseProduct = "OTHC"
                then AssetClassCommodityC10Other1 {
                    basePdct: drrReport -> baseProduct to-enum AssetClassProductType11Code
                },
            // Paper
            ppr: AssetClassCommodityPaper4Choice {
                cntnrBrd: if drrReport -> assetClass = COMM
                        and drrReport -> baseProduct = "PAPR"
                        and drrReport -> subProduct = "CBRD"
                    then PaperCommodityContainerBoard2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType8Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType35Code
                    },
                nwsprnt: if drrReport -> assetClass = COMM
                        and drrReport -> baseProduct = "PAPR"
                        and drrReport -> subProduct = "NSPT"
                    then PaperCommodityNewsprint2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType8Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType36Code
                    },
                pulp: if drrReport -> assetClass = COMM
                        and drrReport -> baseProduct = "PAPR"
                        and drrReport -> subProduct = "PULP"
                    then PaperCommodityPulp2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType8Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType37Code
                    },
                rcvrdPpr: if drrReport -> assetClass = COMM
                        and drrReport -> baseProduct = "PAPR"
                        and drrReport -> subProduct = "RCVP"
                    then PaperCommodityOther1 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType8Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType49Code
                    },
                othr: if drrReport -> assetClass = COMM
                        and drrReport -> baseProduct = "PAPR"
                        and drrReport -> subProduct = "OTHR"
                    then PaperCommodityOther1 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType8Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType49Code
            }},
            plprpln: AssetClassCommodityPolypropylene4Choice {
                // Polypropylene
                plstc: if drrReport -> assetClass = COMM
                        and drrReport -> baseProduct = "POLY"
                        and drrReport -> subProduct = "PLST"
                    then PolypropyleneCommodityPlastic2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType9Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType18Code
                    },
                othr: if drrReport -> assetClass = COMM
                        and drrReport -> baseProduct = "POLY"
                        and drrReport -> subProduct = "OTHR"
                    then PolypropyleneCommodityOther2 {
                        basePdct: drrReport -> baseProduct to-enum AssetClassProductType9Code,
                        subPdct: drrReport -> subProduct to-enum AssetClassSubProductType49Code
        }}}

func GetOptn:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        optn OptionOrSwaption10__1 (1..1)

    set optn:
        OptionOrSwaption10__1 {
            tp: drrReport -> optionType to-enum OptionType2Code,
            exrcStyle: drrReport -> optionStyle to-enum OptionStyle6Code__1,
            // ESMA 2.134 Strike Price, 2.49 Price Currency
            strkPric: drrReport
                extract
                    SecuritiesTransactionPrice17Choice__1 {
                        mntryVal: if strikePriceNotation = Monetary
                            then AmountAndDirection106__1 {
                                amt: ActiveOrHistoricCurrencyAnd13DecimalAmount__1 {
                                    value: strikePrice -> monetary,
                                    ccy: if ((drrReport -> contractType = OPTN or drrReport -> contractType = SWPT)
                                            and (drrReport -> assetClass = CURR or drrReport -> assetClass = INTR)) = False
                                        then drrReport -> strikePriceCurrency to-string
                                },
                                ...
                            },
                        pctg: if strikePriceNotation = Percentage
                            then strikePrice -> percentage
                    },
            strkPricSchdl: drrReport -> strikePriceSchedule
                extract
                    Schedule4__1 {
                        uadjstdFctvDt: effectiveDate,
                        uadjstdEndDt: endDate,
                        pric: SecuritiesTransactionPrice17Choice__1 {
                            mntryVal: if price -> monetary exists
                                then AmountAndDirection106__1 {
                                    amt: ActiveOrHistoricCurrencyAnd13DecimalAmount__1 {
                                        value: price -> monetary,
                                        ccy: if (drrReport -> contractType = OPTN or drrReport -> contractType = SWPT)
                                                and (drrReport -> assetClass = CURR or drrReport -> assetClass = INTR) = False
                                            then drrReport -> strikePriceCurrency to-string
                                    },
                                    ...
                                },
                            pctg: if price -> percentage exists
                                then price -> percentage
            }},
            prmAmt: ActiveOrHistoricCurrencyAnd5DecimalAmount__1 {
                value: drrReport -> optionPremiumAmount,
                ccy: drrReport -> optionPremiumCurrency to-string
            },
            prmPmtDt: drrReport -> optionPremiumPaymentDate,
            mtrtyDtOfUndrlyg: drrReport -> maturityDateOfTheUnderlying
        }

func GetNrgySpcfcAttrbts:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        nrgySpcfcAttrbts EnergySpecificAttribute9__1 (1..1)

    set nrgySpcfcAttrbts:
        EnergySpecificAttribute9__1 {
            dlvryPtOrZone: drrReport -> deliveryPoint
                extract
                    DeliveryInterconnectionPoint1Choice__1 {
                        cd: item
                    },
            intrCnnctnPt: DeliveryInterconnectionPoint1Choice__1 {
                cd: if drrReport -> assetClass = COMM
                        and drrReport -> baseProduct = "NRGY"
                        and (drrReport -> subProduct = "ELEC" or drrReport -> subProduct = "NGAS")
                    then drrReport -> interconnectionPoint to-string,
            },
            ldTp: if drrReport -> deliveryPoint exists
                then drrReport -> loadType to-enum EnergyLoadType1Code,
            dlvryAttr: drrReport -> deliveryReport
                extract
                    EnergyDeliveryAttribute10__1 {
                        dlvryIntrvl: TimePeriodDetails1 {
                            frTm: deliveryStartTime,
                            toTm: deliveryEndTime
                        },
                        dlvryDt: DatePeriod1 {
                            frDt: deliveryStartDate,
                            toDt: deliveryStartDate
                        },
                        drtn: duration to-enum DurationType1Code,
                        wkDay: daysOfTheWeek extract to-enum WeekDay3Code__1,
                        dlvryCpcty: Quantity47Choice__1 {
                            qty: deliveryCapacity
                        },
                        qtyUnit: EnergyQuantityUnit2Choice__1 {
                            cd: quantityUnit to-enum EnergyQuantityUnit2Code
                        },
                        pricTmIntrvlQty: AmountAndDirection106__3 {
                            amt: ActiveOrHistoricCurrencyAnd20Amount {
                                value: priceTimeIntervalQuantity,
                                ccy: currencyOfThePriceTimeIntervalQuantity to-string
                            },
                            ...
        }}}

func GetCdt:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        cdt CreditDerivative4__1 (1..1)

    set cdt:
        CreditDerivative4__1 {
            snrty: drrReport -> seniority to-enum DebtInstrumentSeniorityType2Code,
            refPty: DerivativePartyIdentification1Choice {
                lei: drrReport -> referenceEntity,
                ...
            },
            srs: drrReport -> series,
            vrsn: drrReport -> seriesVersion,
            indxFctr: drrReport -> indexFactor,
            trch: if drrReport -> tranche = True
                then TrancheIndicator3Choice {
                    trnchd: Tranche3 {
                        attchmntPt: drrReport -> cdSIndexAttachmentPoint,
                        dtchmntPt: drrReport -> cdSIndexDetachmentPoint
                    },
                    ...
        }}

func GetOthrPmt:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        othrPmt OtherPayment5__1 (0..*)

    add othrPmt:
        drrReport -> otherPayment
            extract
                OtherPayment5__1 {
                    pmtTp: PaymentType5Choice__1 {
                        tp: paymentType to-enum PaymentType4Code
                    },
                    pmtAmt: AmountAndDirection106__2 {
                        amt: ActiveOrHistoricCurrencyAnd5DecimalAmount__1 {
                            value: amount,
                            ccy: currency to-string
                    }},
                    pmtDt: date,
                    pmtPyer: PartyIdentification236Choice__1 {
                        lgl: OrganisationIdentification15Choice__1 {
                            lei: payer
                        },
                        ...
                    },
                    pmtRcvr: PartyIdentification236Choice__1 {
                        lgl: OrganisationIdentification15Choice__1 {
                            lei: receiver
                        },
                        ...
        }}

func GetPackg:
    inputs:
        drrReport ESMAEMIRTransactionReport (1..1)
    output:
        packg Package4__1 (1..1)

    set packg:
        Package4__1 {
            cmplxTradId: drrReport -> packageIdentifier,
            pric: drrReport
                extract
                    SecuritiesTransactionPrice17Choice__2 {
                        mntryVal: if packageTransactionPriceNotation = Monetary
                            then AmountAndDirection106__4 {
                                amt: ActiveOrHistoricCurrencyAnd13DecimalAmount__1 {
                                    value: packageTransactionPrice -> monetary,
                                    ccy: drrReport -> packageTransactionPriceCurrency to-string
                        }},
                        pctg: if packageTransactionPriceNotation = Percentage
                            then packageTransactionPrice -> percentage
                    },
            sprd: drrReport
                extract
                    SecuritiesTransactionPrice20Choice__1 {
                        mntryVal: if packageTransactionSpreadNotation = Monetary
                            then AmountAndDirection106__1 {
                                amt: ActiveOrHistoricCurrencyAnd13DecimalAmount__1 {
                                    value: packageTransactionSpread -> monetary,
                                    ccy: drrReport -> packageTransactionSpreadCurrency to-string
                                },
                                ...
                            },
                        pctg: if packageTransactionSpreadNotation = Percentage
                            then packageTransactionSpread -> percentage,
                        bsisPtSprd: if packageTransactionSpreadNotation = Basis
                            then packageTransactionSpread -> basis
        }}
