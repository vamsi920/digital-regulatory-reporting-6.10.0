namespace drr.regulation.common.trade.index
version "${project.version}"

import cdm.product.qualification.*

import drr.regulation.common.*
import drr.standards.iosco.cde.base.* as cdebase
import drr.standards.iosco.cde.base.price.*

reporting rule Seniority from TransactionReportInstruction: <"Seniority">
    extract GetSeniority

reporting rule Series from TransactionReportInstruction: <"Series">
    ProductForEvent
        then extract
            if EconomicTermsForProduct(UnderlierForProduct) -> payout -> creditDefaultPayout exists
            then EconomicTermsForProduct(UnderlierForProduct) -> payout -> creditDefaultPayout
            else if EconomicTermsForProduct -> payout -> creditDefaultPayout exists
            then EconomicTermsForProduct -> payout -> creditDefaultPayout
        then extract generalTerms -> indexReferenceInformation -> indexSeries
        then FormatToMax5Number

reporting rule IndexFactor from TransactionReportInstruction: <"Index factor">
    extract TradeForEvent
    then extract
        if IsCreditDefaultSwapIndex
        then tradableProduct -> product -> contractualProduct -> economicTerms -> payout -> creditDefaultPayout -> generalTerms -> indexReferenceInformation -> indexFactor
        else if IsCreditTotalReturnSwap(ProductForTrade)
                or Qualify_Credit_OptionOther(EconomicTermsForProduct(ProductForTrade))
        then FormatToBaseOne18Rate(1)
        else if EconomicTermsForProduct(UnderlierForProduct(tradableProduct -> product)) -> payout -> creditDefaultPayout exists
        then FormatToBaseOneRate(
                    EconomicTermsForProduct(UnderlierForProduct(tradableProduct -> product)) -> payout -> creditDefaultPayout -> generalTerms -> indexReferenceInformation -> indexFactor
                )

reporting rule Version from TransactionReportInstruction: <"Version">
    extract ProductForEvent
    then extract
        if EconomicTermsForProduct(UnderlierForProduct) -> payout -> creditDefaultPayout exists
        then EconomicTermsForProduct(UnderlierForProduct) -> payout -> creditDefaultPayout
        else if EconomicTermsForProduct -> payout -> creditDefaultPayout exists
        then EconomicTermsForProduct -> payout -> creditDefaultPayout
    then extract generalTerms -> indexReferenceInformation -> indexAnnexVersion
    then cdebase.price.FormatToMax5Number
