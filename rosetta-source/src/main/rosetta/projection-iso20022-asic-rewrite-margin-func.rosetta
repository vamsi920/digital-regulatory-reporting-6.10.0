namespace drr.projection.iso20022.asic.rewrite.margin
version "${project.version}"

import drr.regulation.asic.rewrite.margin.*
import drr.regulation.common.*

import iso20022.auth108.asic.*

func Project_ASICMarginReportToIso20022:
    [projection XML]
    inputs:
        marginReport ASICMarginReport (1..1)
    output:
        iso20022Report Document (1..1)

    set iso20022Report -> derivsTradMrgnDataRpt -> tradData -> rpt:
        TradeReport34Choice__1 {
            mrgnUpd: if marginReport -> actionType = MarginActionEnum -> MARU
                then Create_MarginReportData(marginReport),
            crrctn: if marginReport -> actionType = MarginActionEnum -> CORR
                then Create_MarginReportData(marginReport)
        }

func Create_MarginReportData:
    inputs:
        marginReport ASICMarginReport (1..1)
    output:
        details MarginReportData9__1 (1..1)

    set details:
        MarginReportData9__1 {
            rptgTmStmp: marginReport -> reportingTimestamp,
            txId: UniqueTransactionIdentifier2Choice__1 {
                unqTxIdr: marginReport -> uniqueTransactionIdentifier,
                prtry: GenericIdentification175__1 {
                    id: if marginReport -> uniqueTransactionIdentifierProprietary exists
                        then marginReport -> uniqueTransactionIdentifierProprietary
            }},
            ctrPtyId: Create_CounterpartySpecificData(marginReport),
            coll: MarginCollateralReport5__1 {
                collstnCtgy: marginReport -> collateralisationCategory to-enum CollateralisationType3Code__1,
                collPrtflCd: CollateralPortfolioCode6Choice__1 {
                    mrgnPrtflCd: MarginPortfolio4__1 {
                        initlMrgnPrtflCd: PortfolioCode5Choice__1 {
                            prtfl: if marginReport -> collateralPortfolioIndicator = True
                                then PortfolioIdentification3__1 {
                                    cd: marginReport -> initialMarginCollateralPortfolioCode,
                                    prtflTxXmptn: marginReport -> portfolioContainingNonReportedComponentIndicator
                                },
                            noPrtfl: if marginReport -> collateralPortfolioIndicator = False
                                then NotApplicable1Code -> NOAP
                        },
                        vartnMrgnPrtflCd: PortfolioCode5Choice__1 {
                            prtfl: if marginReport -> collateralPortfolioIndicator = True
                                then PortfolioIdentification3__1 {
                                    cd: marginReport -> collateralPortfolioCodeVM,
                                    prtflTxXmptn: marginReport -> portfolioContainingNonReportedComponentIndicator
                                },
                            noPrtfl: if marginReport -> collateralPortfolioIndicator = False
                                then NotApplicable1Code -> NOAP
                }}},
                tmStmp: marginReport -> collateralTimestamp
            },
            pstdMrgnOrColl: Create_PostedMarginReport(marginReport),
            rcvdMrgnOrColl: Create_ReceivedMarginReport(marginReport),
            techAttrbts: TechnicalAttributes6__1 {
                techRcrdId: marginReport -> technicalRecordId + "_" + marginReport -> reportingTimestamp to-string,
                rptRctTmStmp: marginReport -> reportingTimestamp
        }}

func Create_CounterpartySpecificData:
    inputs:
        marginReport ASICMarginReport (1..1)
    output:
        ctrPtySpcfcData TradeCounterpartyReport20__1 (1..1)

    set ctrPtySpcfcData:
        TradeCounterpartyReport20__1 {
            rptgCtrPty: Counterparty45__1 {
                id: PartyIdentification248Choice__1 {
                    lgl: LegalPersonIdentification1__1 {
                        id: OrganisationIdentification15Choice__1 {
                            lei: marginReport -> counterparty1
                }}},
                rptgXmptn: ReportingExemption1__1 {
                    rsn: marginReport -> smallScaleBuySideEntityIndicator
            }},
            submitgAgt: OrganisationIdentification15Choice__1 {
                lei: marginReport -> reportSubmittingEntityID
            },
            othrCtrPty: Counterparty46__1 {
                idTp: PartyIdentification248Choice__2 {
                    lgl: if marginReport -> counterpartyIdentifierType = True
                        then LegalPersonIdentification1__2 {
                            id: Create_OrganisationIdentification15Choice__2(marginReport)
                        },
                    ntrl: if marginReport -> counterpartyIdentifierType = False
                        then NaturalPersonIdentification3__1 {
                            id: NaturalPersonIdentification2__1 {
                                id: GenericIdentification175__1 {
                                    id: marginReport -> counterparty2
            }}}}},
            nttyRspnsblForRpt: OrganisationIdentification15Choice__1 {
                lei: marginReport -> reportingEntity
            },
            exctnAgt: OrganisationIdentification15Choice__1 {
                lei: marginReport -> executionAgentOfCounterparty1
        }}

func Create_OrganisationIdentification15Choice__2:
    inputs:
        drrReport ASICMarginReport (0..1)
    output:
        id OrganisationIdentification15Choice__2 (0..1)

    set id:
        OrganisationIdentification15Choice__2 {
            lei: if drrReport -> counterpartyIdentifierType = True
                then drrReport -> counterparty2,
            othr: if drrReport -> counterpartyIdentifierType = False
                then OrganisationIdentification38__1 {
                    id: GenericIdentification175__1 {
                        id: drrReport -> counterparty2
        }}}

func Create_PostedMarginReport:
    inputs:
        marginReport ASICMarginReport (1..1)
    output:
        postMarginData PostedMarginOrCollateral6__1 (1..1)

    set postMarginData:
        PostedMarginOrCollateral6__1 {
            initlMrgnPstdPreHrcut: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                value: marginReport -> initialMarginPostedByTheReportingEntityPreHaircut,
                ccy: marginReport -> currencyofInitialMarginPosted to-string
            },
            initlMrgnPstdPstHrcut: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                value: marginReport -> initialMarginPostedByTheReportingEntityPostHaircut,
                ccy: marginReport -> currencyofInitialMarginPosted to-string
            },
            vartnMrgnPstdPreHrcut: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                value: marginReport -> variationMarginPostedByTheReportingEntityPreHaircut,
                ccy: marginReport -> currencyOfVariationMarginPosted to-string
        }}

func Create_ReceivedMarginReport:
    inputs:
        marginReport ASICMarginReport (1..1)
    output:
        rcvdMarginData ReceivedMarginOrCollateral6__1 (1..1)

    set rcvdMarginData:
        ReceivedMarginOrCollateral6__1 {
            initlMrgnRcvdPreHrcut: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                value: marginReport -> initialMarginCollectedByTheReportingEntityPreHaircut,
                ccy: marginReport -> currencyofInitialMarginCollected to-string
            },
            initlMrgnRcvdPstHrcut: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                value: marginReport -> initialMarginCollectedByTheReportingEntityPostHaircut,
                ccy: marginReport -> currencyofInitialMarginCollected to-string
            },
            vartnMrgnRcvdPreHrcut: ActiveOrHistoricCurrencyAnd5DecimalAmount {
                value: marginReport -> variationMarginCollectedByTheReportingEntityPreHaircut,
                ccy: marginReport -> currencyOfVariationMarginCollected to-string
        },}
